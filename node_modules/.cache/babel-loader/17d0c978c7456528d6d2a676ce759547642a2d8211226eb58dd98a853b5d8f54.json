{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/33/duck/src/Page4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page4 = () => {\n  _s();\n  const [previousValue, setPreviousValue] = useState(56000);\n  const [currentValue, setCurrentValue] = useState(56000);\n  const [rectangles, setRectangles] = useState([]);\n  const [lastY, setLastY] = useState(null); // Хранение последней позиции Y\n  const canvasRef = useRef(null);\n  const animationTimeoutRef = useRef(null);\n  const generateValue = () => {\n    const newValue = Math.floor(Math.random() * (56745 - 55255 + 1)) + 55255;\n    setCurrentValue(newValue);\n  };\n  useEffect(() => {\n    if (currentValue !== previousValue) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      const scale = window.devicePixelRatio || 1;\n      canvas.width = 500 * scale;\n      canvas.height = 300 * scale;\n      ctx.scale(scale, scale);\n      const difference = currentValue - previousValue;\n      let step = difference > 0 ? 1 : -1;\n      let progress = 0;\n      const startY = lastY !== null ? lastY : 150 - (previousValue - 56000) / 1490 * 120;\n      const finalTargetY = 150 - (currentValue - 56000) / 1490 * 120;\n      const rectWidth = 30;\n\n      // Генерация случайного промежуточного значения в пределах амплитуды\n      const randomTargetY = startY + Math.random() * (finalTargetY - startY) * (difference > 0 ? 1 : -1);\n      let animationDirection = 1; // 1 для увеличения, -1 для уменьшения\n      const startTime = Date.now();\n      const interval = setInterval(() => {\n        // Множитель для изменения шага на каждой итерации\n        const randomMultiplier = Math.random() * (0.5 - 0.01) + 0.01;\n        progress += step * animationDirection * randomMultiplier;\n        ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n        const updatedRectangles = rectangles.map(rect => ({\n          ...rect,\n          x: rect.x - rectWidth\n        }));\n        updatedRectangles.forEach(rect => {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n        });\n        const height = Math.abs(progress);\n        let rectY;\n        if (difference > 0) {\n          rectY = startY - height;\n        } else {\n          rectY = startY;\n        }\n        ctx.fillStyle = difference > 0 ? 'green' : 'red';\n        ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n        if (animationDirection === 1 && Math.abs(progress) >= Math.abs(randomTargetY - startY)) {\n          animationDirection = -1; // Инвертируем направление при достижении случайного значения\n        } else if (animationDirection === -1 && Math.abs(progress) <= 0) {\n          animationDirection = 1;\n          // Генерируем новое случайное промежуточное значение для следующего цикла\n          const newRandomTargetY = startY + Math.random() * (finalTargetY - startY) * (difference > 0 ? 1 : -1);\n          setLastY(startY); // Обновляем стартовое значение для нового цикла\n          startY = lastY !== null ? lastY : 150 - (previousValue - 56000) / 1490 * 120;\n        }\n        if (Date.now() - startTime >= 5000) {\n          // 5 секунд прошли\n          clearInterval(interval);\n          updatedRectangles.push({\n            x: canvas.width / scale / 2 - 15,\n            y: rectY,\n            width: rectWidth,\n            height: height,\n            color: difference > 0 ? 'green' : 'red'\n          });\n          setRectangles(updatedRectangles);\n          setLastY(difference > 0 ? rectY : rectY + height); // Сохраняем последнюю позицию Y в зависимости от направления\n          setPreviousValue(currentValue);\n        }\n      }, 20);\n      animationTimeoutRef.current = interval;\n      return () => clearInterval(interval);\n    }\n  }, [currentValue, previousValue, rectangles, lastY]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        border: '1px solid black',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateValue,\n      style: {\n        padding: '10px 20px',\n        fontSize: '16px',\n        cursor: 'pointer',\n        backgroundColor: '#4CAF50',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px'\n      },\n      children: \"Generate Value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(Page4, \"1yLeSy8NeUzNovzK/83EIBL768s=\");\n_c = Page4;\nexport default Page4;\nvar _c;\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Page4","_s","previousValue","setPreviousValue","currentValue","setCurrentValue","rectangles","setRectangles","lastY","setLastY","canvasRef","animationTimeoutRef","generateValue","newValue","Math","floor","random","canvas","current","ctx","getContext","scale","window","devicePixelRatio","width","height","difference","step","progress","startY","finalTargetY","rectWidth","randomTargetY","animationDirection","startTime","Date","now","interval","setInterval","randomMultiplier","clearRect","updatedRectangles","map","rect","x","forEach","fillStyle","color","fillRect","y","abs","rectY","newRandomTargetY","clearInterval","push","style","display","flexDirection","alignItems","children","ref","border","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onClick","padding","fontSize","cursor","backgroundColor","borderRadius","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/33/duck/src/Page4.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst Page4 = () => {\n    const [previousValue, setPreviousValue] = useState(56000);\n    const [currentValue, setCurrentValue] = useState(56000);\n    const [rectangles, setRectangles] = useState([]);\n    const [lastY, setLastY] = useState(null);  // Хранение последней позиции Y\n    const canvasRef = useRef(null);\n    const animationTimeoutRef = useRef(null);\n\n    const generateValue = () => {\n        const newValue = Math.floor(Math.random() * (56745 - 55255 + 1)) + 55255;\n        setCurrentValue(newValue);\n    };\n\n    useEffect(() => {\n        if (currentValue !== previousValue) {\n            const canvas = canvasRef.current;\n            const ctx = canvas.getContext('2d');\n\n            const scale = window.devicePixelRatio || 1;\n            canvas.width = 500 * scale;\n            canvas.height = 300 * scale;\n            ctx.scale(scale, scale);\n\n            const difference = currentValue - previousValue;\n            let step = difference > 0 ? 1 : -1;\n            let progress = 0;\n\n            const startY = lastY !== null ? lastY : 150 - ((previousValue - 56000) / 1490) * 120;\n            const finalTargetY = 150 - ((currentValue - 56000) / 1490) * 120;\n            const rectWidth = 30;\n\n            // Генерация случайного промежуточного значения в пределах амплитуды\n            const randomTargetY = startY + Math.random() * (finalTargetY - startY) * (difference > 0 ? 1 : -1);\n\n            let animationDirection = 1; // 1 для увеличения, -1 для уменьшения\n            const startTime = Date.now();\n\n            const interval = setInterval(() => {\n                // Множитель для изменения шага на каждой итерации\n                const randomMultiplier = Math.random() * (0.5 - 0.01) + 0.01;\n                progress += step * animationDirection * randomMultiplier;\n\n                ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n                const updatedRectangles = rectangles.map((rect) => ({\n                    ...rect,\n                    x: rect.x - rectWidth,\n                }));\n\n                updatedRectangles.forEach((rect) => {\n                    ctx.fillStyle = rect.color;\n                    ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n                });\n\n                const height = Math.abs(progress);\n                let rectY;\n                \n                if (difference > 0) {\n                    rectY = startY - height;\n                } else {\n                    rectY = startY;\n                }\n\n                ctx.fillStyle = difference > 0 ? 'green' : 'red';\n                ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n\n                if (animationDirection === 1 && Math.abs(progress) >= Math.abs(randomTargetY - startY)) {\n                    animationDirection = -1; // Инвертируем направление при достижении случайного значения\n                } else if (animationDirection === -1 && Math.abs(progress) <= 0) {\n                    animationDirection = 1;\n                    // Генерируем новое случайное промежуточное значение для следующего цикла\n                    const newRandomTargetY = startY + Math.random() * (finalTargetY - startY) * (difference > 0 ? 1 : -1);\n                    setLastY(startY); // Обновляем стартовое значение для нового цикла\n                    startY = lastY !== null ? lastY : 150 - ((previousValue - 56000) / 1490) * 120;\n                }\n\n                if (Date.now() - startTime >= 5000) { // 5 секунд прошли\n                    clearInterval(interval);\n\n                    updatedRectangles.push({\n                        x: canvas.width / scale / 2 - 15,\n                        y: rectY,\n                        width: rectWidth,\n                        height: height,\n                        color: difference > 0 ? 'green' : 'red',\n                    });\n\n                    setRectangles(updatedRectangles);\n                    setLastY(difference > 0 ? rectY : rectY + height);  // Сохраняем последнюю позицию Y в зависимости от направления\n                    setPreviousValue(currentValue);\n                }\n            }, 20);\n\n            animationTimeoutRef.current = interval;\n\n            return () => clearInterval(interval);\n        }\n    }, [currentValue, previousValue, rectangles, lastY]);\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n            <canvas\n                ref={canvasRef}\n                style={{ width: 500, height: 300, border: '1px solid black', marginBottom: '20px' }}\n            ></canvas>\n            <button\n                onClick={generateValue}\n                style={{\n                    padding: '10px 20px',\n                    fontSize: '16px',\n                    cursor: 'pointer',\n                    backgroundColor: '#4CAF50',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '5px'\n                }}>\n                Generate Value\n            </button>\n        </div>\n    );\n};\n\nexport default Page4;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}