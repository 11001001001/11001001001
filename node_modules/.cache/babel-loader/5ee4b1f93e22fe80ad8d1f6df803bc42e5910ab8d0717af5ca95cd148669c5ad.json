{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/33/duck/src/Page4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page4 = () => {\n  _s();\n  const [previousValue, setPreviousValue] = useState(60600);\n  const [currentValue, setCurrentValue] = useState(60600);\n  const [rectangles, setRectangles] = useState([]); // массив для хранения прямоугольников\n  const canvasRef = useRef(null);\n  const fetchBitcoinPrice = async () => {\n    try {\n      const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n      const data = await response.json();\n      const bitcoinPrice = Math.floor(data.bpi.USD.rate_float); // текущая цена биткоина\n      const adjustment = Math.random() > 0.5 ? 120 : -120; // случайное изменение\n      setCurrentValue(bitcoinPrice + adjustment);\n    } catch (error) {\n      console.error('Error fetching Bitcoin price:', error);\n    }\n  };\n  useEffect(() => {\n    fetchBitcoinPrice(); // Запрос цены биткоина при загрузке страницы\n    const intervalId = setInterval(fetchBitcoinPrice, 60000); // Обновление цены каждую минуту\n    return () => clearInterval(intervalId); // Очистка интервала при размонтировании компонента\n  }, []);\n  useEffect(() => {\n    if (currentValue !== previousValue) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      const scale = window.devicePixelRatio || 1;\n      canvas.width = 500 * scale;\n      canvas.height = 300 * scale;\n      ctx.scale(scale, scale);\n      const difference = currentValue - previousValue;\n      const step = difference > 0 ? 1 : -1;\n      let progress = 0;\n      const startY = 150 - (previousValue - 56000) / 345 * 120;\n      const targetY = 150 - (currentValue - 56000) / 345 * 120;\n      const rectWidth = 30;\n      const interval = setInterval(() => {\n        progress += step;\n        ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n        // смещение всех прямоугольников влево\n        const updatedRectangles = rectangles.map(rect => ({\n          ...rect,\n          x: rect.x - rectWidth\n        }));\n\n        // рисование всех прямоугольников\n        updatedRectangles.forEach(rect => {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n        });\n\n        // рисование текущего прямоугольника\n        const height = Math.abs(progress);\n        const rectY = difference > 0 ? startY - height : startY;\n        ctx.fillStyle = difference > 0 ? 'green' : 'red';\n        ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n        if (Math.abs(progress) >= Math.abs(targetY - startY)) {\n          clearInterval(interval);\n\n          // добавляем новый прямоугольник в массив\n          updatedRectangles.push({\n            x: canvas.width / scale / 2 - 15,\n            y: rectY,\n            width: rectWidth,\n            height: height,\n            color: difference > 0 ? 'green' : 'red'\n          });\n          setRectangles(updatedRectangles);\n          setPreviousValue(currentValue);\n        }\n      }, 20);\n      return () => clearInterval(interval);\n    }\n  }, [currentValue, previousValue, rectangles]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        border: '1px solid black',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(Page4, \"gGE/ngP11S8pfcBzr0VScuVi7xc=\");\n_c = Page4;\nexport default Page4;\nvar _c;\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Page4","_s","previousValue","setPreviousValue","currentValue","setCurrentValue","rectangles","setRectangles","canvasRef","fetchBitcoinPrice","response","fetch","data","json","bitcoinPrice","Math","floor","bpi","USD","rate_float","adjustment","random","error","console","intervalId","setInterval","clearInterval","canvas","current","ctx","getContext","scale","window","devicePixelRatio","width","height","difference","step","progress","startY","targetY","rectWidth","interval","clearRect","updatedRectangles","map","rect","x","forEach","fillStyle","color","fillRect","y","abs","rectY","push","style","display","flexDirection","alignItems","children","ref","border","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/33/duck/src/Page4.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst Page4 = () => {\n  const [previousValue, setPreviousValue] = useState(60600);\n  const [currentValue, setCurrentValue] = useState(60600);\n  const [rectangles, setRectangles] = useState([]); // массив для хранения прямоугольников\n  const canvasRef = useRef(null);\n\n  const fetchBitcoinPrice = async () => {\n    try {\n      const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n      const data = await response.json();\n      const bitcoinPrice = Math.floor(data.bpi.USD.rate_float); // текущая цена биткоина\n      const adjustment = Math.random() > 0.5 ? 120 : -120; // случайное изменение\n      setCurrentValue(bitcoinPrice + adjustment);\n    } catch (error) {\n      console.error('Error fetching Bitcoin price:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchBitcoinPrice(); // Запрос цены биткоина при загрузке страницы\n    const intervalId = setInterval(fetchBitcoinPrice, 60000); // Обновление цены каждую минуту\n    return () => clearInterval(intervalId); // Очистка интервала при размонтировании компонента\n  }, []);\n\n  useEffect(() => {\n    if (currentValue !== previousValue) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      const scale = window.devicePixelRatio || 1;\n      canvas.width = 500 * scale;\n      canvas.height = 300 * scale;\n      ctx.scale(scale, scale);\n\n      const difference = currentValue - previousValue;\n      const step = difference > 0 ? 1 : -1;\n      let progress = 0;\n\n      const startY = 150 - ((previousValue - 56000) / 345) * 120;\n      const targetY = 150 - ((currentValue - 56000) / 345) * 120;\n      const rectWidth = 30;\n      const interval = setInterval(() => {\n        progress += step;\n\n        ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n        // смещение всех прямоугольников влево\n        const updatedRectangles = rectangles.map((rect) => ({\n          ...rect,\n          x: rect.x - rectWidth,\n        }));\n\n        // рисование всех прямоугольников\n        updatedRectangles.forEach((rect) => {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n        });\n\n        // рисование текущего прямоугольника\n        const height = Math.abs(progress);\n        const rectY = difference > 0 ? startY - height : startY;\n        ctx.fillStyle = difference > 0 ? 'green' : 'red';\n        ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n\n        if (Math.abs(progress) >= Math.abs(targetY - startY)) {\n          clearInterval(interval);\n\n          // добавляем новый прямоугольник в массив\n          updatedRectangles.push({\n            x: canvas.width / scale / 2 - 15,\n            y: rectY,\n            width: rectWidth,\n            height: height,\n            color: difference > 0 ? 'green' : 'red',\n          });\n\n          setRectangles(updatedRectangles);\n          setPreviousValue(currentValue);\n        }\n      }, 20);\n\n      return () => clearInterval(interval);\n    }\n  }, [currentValue, previousValue, rectangles]);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <canvas\n        ref={canvasRef}\n        style={{ width: 500, height: 300, border: '1px solid black', marginBottom: '20px' }}\n      ></canvas>\n    </div>\n  );\n};\n\nexport default Page4;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}