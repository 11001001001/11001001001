{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/33/duck/src/Page4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page4 = () => {\n  _s();\n  const [centerValue, setCenterValue] = useState(null);\n  const [previousValue, setPreviousValue] = useState(null);\n  const [currentValue, setCurrentValue] = useState(null);\n  const [currentValueShow, setCurrentValueShow] = useState(1);\n  const [rectangles, setRectangles] = useState([]);\n  const [lastY, setLastY] = useState(null);\n  const [timer, setTimer] = useState(0);\n  const [buttonDisabled, setButtonDisabled] = useState(false);\n  const canvasRef = useRef(null);\n  const lineCanvasRef = useRef(null);\n  const fixedLineCanvasRef = useRef(null);\n  const animationTimeoutRef = useRef(null);\n  const timerIntervalRef = useRef(null);\n  const fetchBitcoinPrice = async () => {\n    try {\n      const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n      const data = await response.json();\n      const price = parseFloat(data.bpi.USD.rate.replace(',', ''));\n      return price;\n    } catch (error) {\n      console.error('Ошибка при получении цены биткоина:', error);\n      return 56000;\n    }\n  };\n  const generateValue = () => {\n    if (centerValue !== null) {\n      const randomRangeSelector = Math.random();\n      let newValue;\n      if (randomRangeSelector <= 0.6) {\n        const min = centerValue - 222;\n        const max = centerValue + 222;\n        newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n      } else if (randomRangeSelector <= 0.8) {\n        const min = centerValue - 333;\n        const max = centerValue + 333;\n        newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n      } else {\n        const min = centerValue - 1111;\n        const max = centerValue + 1111;\n        newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n      setCurrentValue(newValue);\n    }\n  };\n  const generateRandomMultiplier = () => {\n    const rangeSelector = Math.random();\n    if (rangeSelector <= 0.4) {\n      return Math.random() * (0.1 - 0.01) + 0.01;\n    } else if (rangeSelector <= 0.7) {\n      return Math.random() * (0.5 - 0.11) + 0.11;\n    } else if (rangeSelector <= 0.8) {\n      return Math.random() * (0.9 - 0.51) + 0.51;\n    } else {\n      return Math.random() * (1 - 0.91) + 0.91;\n    }\n  };\n  useEffect(() => {\n    const initialize = async () => {\n      const price = await fetchBitcoinPrice();\n      setCenterValue(price);\n      setPreviousValue(price);\n      setCurrentValue(price);\n      setCurrentValueShow(price);\n    };\n    initialize();\n  }, []);\n  useEffect(() => {\n    if (centerValue !== null) {\n      generateValue();\n    }\n  }, [centerValue]);\n  const startTimer = () => {\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n    }\n    setTimer(30);\n    setButtonDisabled(true);\n    timerIntervalRef.current = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer <= 1) {\n          clearInterval(timerIntervalRef.current);\n          setButtonDisabled(false);\n          clearFixedLine(); // Убираем линию по завершению таймера\n          return 0;\n        }\n        return prevTimer - 1;\n      });\n    }, 1000);\n  };\n  const drawFixedLine = () => {\n    const fixedLineCanvas = fixedLineCanvasRef.current;\n    const fixedLineCtx = fixedLineCanvas.getContext('2d');\n    const scale = window.devicePixelRatio || 1;\n    fixedLineCanvas.width = 500 * scale;\n    fixedLineCanvas.height = 300 * scale;\n    fixedLineCtx.scale(scale, scale);\n    const independentLineY = lastY || 150 - (previousValue - centerValue) / 1111 * 120;\n    fixedLineCtx.clearRect(0, 0, fixedLineCanvas.width / scale, fixedLineCanvas.height / scale);\n    fixedLineCtx.strokeStyle = 'yellow';\n    fixedLineCtx.lineWidth = 1;\n    fixedLineCtx.beginPath();\n    fixedLineCtx.moveTo(0, independentLineY);\n    fixedLineCtx.lineTo(fixedLineCanvas.width / scale, independentLineY);\n    fixedLineCtx.stroke();\n    startTimer();\n  };\n  const clearFixedLine = () => {\n    const fixedLineCanvas = fixedLineCanvasRef.current;\n    const fixedLineCtx = fixedLineCanvas.getContext('2d');\n    fixedLineCtx.clearRect(0, 0, fixedLineCanvas.width, fixedLineCanvas.height);\n  };\n  const handleButtonClick = () => {\n    drawFixedLine();\n  };\n  useEffect(() => {\n    const startDrawing = () => {\n      const drawRectangle = () => {\n        if (currentValue !== previousValue && previousValue !== null) {\n          const canvas = canvasRef.current;\n          const lineCanvas = lineCanvasRef.current;\n          const ctx = canvas.getContext('2d');\n          const lineCtx = lineCanvas.getContext('2d');\n          const scale = window.devicePixelRatio || 1;\n          canvas.width = 500 * scale;\n          canvas.height = 300 * scale;\n          lineCanvas.width = 500 * scale;\n          lineCanvas.height = 300 * scale;\n          ctx.scale(scale, scale);\n          lineCtx.scale(scale, scale);\n          const difference = currentValue - previousValue;\n          let step = difference > 0 ? 1 : -1;\n          let progress = 0;\n          const startY = lastY !== null ? lastY : 150 - (previousValue - centerValue) / 1111 * 120;\n          const targetY = 150 - (currentValue - centerValue) / 1111 * 120;\n          const rectWidth = 20;\n          let animationDirection = 1;\n          let hasReachedTarget = false;\n          const startTime = Date.now();\n          const interval = setInterval(() => {\n            const randomMultiplier = generateRandomMultiplier();\n            progress += step * animationDirection * randomMultiplier;\n            ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n            lineCtx.clearRect(0, 0, lineCanvas.width / scale, lineCanvas.height / scale);\n            const updatedRectangles = rectangles.map(rect => ({\n              ...rect,\n              x: rect.x - rectWidth\n            }));\n            updatedRectangles.forEach(rect => {\n              ctx.fillStyle = rect.color;\n              ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n            });\n            const height = Math.abs(progress);\n            let rectY;\n            if (difference > 0) {\n              rectY = startY - height;\n            } else {\n              rectY = startY;\n            }\n            ctx.fillStyle = difference > 0 ? 'green' : 'red';\n            ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n            lineCtx.strokeStyle = 'lightblue';\n            lineCtx.lineWidth = 0.4;\n            lineCtx.setLineDash([5, 5]);\n            lineCtx.beginPath();\n            const lineEndX = canvas.width / scale * 0.775;\n            if (difference > 0) {\n              lineCtx.moveTo(0, rectY);\n              lineCtx.lineTo(lineEndX, rectY);\n            } else {\n              lineCtx.moveTo(0, rectY + height);\n              lineCtx.lineTo(lineEndX, rectY + height);\n            }\n            lineCtx.stroke();\n            const updatedCurrentValueShow = currentValueShow + progress;\n            const text = updatedCurrentValueShow.toFixed(2);\n            const textX = lineEndX + 5;\n            const textY = difference > 0 ? rectY + 3 : rectY + height + 3;\n            lineCtx.font = '10px Arial';\n            lineCtx.fillStyle = 'white';\n            lineCtx.fillText(text, textX, textY);\n            if (textX + lineCtx.measureText(text).width > canvas.width / scale) {\n              ctx.clearRect(canvas.width / scale - 60, textY - 10, 60, 15);\n              lineCtx.fillText(text, canvas.width / scale - 60, textY);\n            }\n            if (!hasReachedTarget && Math.abs(progress) >= Math.abs(targetY - startY)) {\n              animationDirection *= -1;\n              hasReachedTarget = true;\n            } else if (hasReachedTarget && Math.abs(progress) <= 2) {\n              animationDirection *= -1;\n              hasReachedTarget = false;\n            }\n            if (Date.now() - startTime >= 5000) {\n              clearInterval(interval);\n              updatedRectangles.push({\n                x: canvas.width / scale / 2 - 15,\n                y: rectY,\n                width: rectWidth,\n                height: height,\n                color: difference > 0 ? 'green' : 'red'\n              });\n              setRectangles(updatedRectangles);\n              setLastY(difference > 0 ? rectY : rectY + height);\n              setPreviousValue(currentValue);\n              setCurrentValueShow(updatedCurrentValueShow);\n              generateValue();\n            }\n          }, 40);\n          animationTimeoutRef.current = interval;\n          return () => clearInterval(interval);\n        }\n      };\n      drawRectangle();\n    };\n    if (currentValue !== previousValue && previousValue !== null) {\n      startDrawing();\n    }\n  }, [currentValue, previousValue, centerValue, rectangles, lastY]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        border: '1px solid black',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: lineCanvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        position: 'absolute',\n        top: 0,\n        pointerEvents: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: fixedLineCanvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        position: 'absolute',\n        top: 0,\n        pointerEvents: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      disabled: buttonDisabled,\n      style: {\n        marginTop: '10px'\n      },\n      children: \"Fix Line for 30 Seconds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: [\"Time remaining: \", timer, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 9\n  }, this);\n};\n_s(Page4, \"v3JHyRLYF38INToRNf43zMDvQ4U=\");\n_c = Page4;\nexport default Page4;\nvar _c;\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Page4","_s","centerValue","setCenterValue","previousValue","setPreviousValue","currentValue","setCurrentValue","currentValueShow","setCurrentValueShow","rectangles","setRectangles","lastY","setLastY","timer","setTimer","buttonDisabled","setButtonDisabled","canvasRef","lineCanvasRef","fixedLineCanvasRef","animationTimeoutRef","timerIntervalRef","fetchBitcoinPrice","response","fetch","data","json","price","parseFloat","bpi","USD","rate","replace","error","console","generateValue","randomRangeSelector","Math","random","newValue","min","max","floor","generateRandomMultiplier","rangeSelector","initialize","startTimer","current","clearInterval","setInterval","prevTimer","clearFixedLine","drawFixedLine","fixedLineCanvas","fixedLineCtx","getContext","scale","window","devicePixelRatio","width","height","independentLineY","clearRect","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","handleButtonClick","startDrawing","drawRectangle","canvas","lineCanvas","ctx","lineCtx","difference","step","progress","startY","targetY","rectWidth","animationDirection","hasReachedTarget","startTime","Date","now","interval","randomMultiplier","updatedRectangles","map","rect","x","forEach","fillStyle","color","fillRect","y","abs","rectY","setLineDash","lineEndX","updatedCurrentValueShow","text","toFixed","textX","textY","font","fillText","measureText","push","style","display","flexDirection","alignItems","position","children","ref","border","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","top","pointerEvents","onClick","disabled","marginTop","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/33/duck/src/Page4.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst Page4 = () => {\n    const [centerValue, setCenterValue] = useState(null);\n    const [previousValue, setPreviousValue] = useState(null);\n    const [currentValue, setCurrentValue] = useState(null);\n    const [currentValueShow, setCurrentValueShow] = useState(1);\n    const [rectangles, setRectangles] = useState([]);\n    const [lastY, setLastY] = useState(null);\n    const [timer, setTimer] = useState(0);\n    const [buttonDisabled, setButtonDisabled] = useState(false);\n    const canvasRef = useRef(null);\n    const lineCanvasRef = useRef(null);\n    const fixedLineCanvasRef = useRef(null);\n    const animationTimeoutRef = useRef(null);\n    const timerIntervalRef = useRef(null);\n\n    const fetchBitcoinPrice = async () => {\n        try {\n            const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n            const data = await response.json();\n            const price = parseFloat(data.bpi.USD.rate.replace(',', ''));\n            return price;\n        } catch (error) {\n            console.error('Ошибка при получении цены биткоина:', error);\n            return 56000;\n        }\n    };\n\n    const generateValue = () => {\n        if (centerValue !== null) {\n            const randomRangeSelector = Math.random();\n            let newValue;\n\n            if (randomRangeSelector <= 0.6) {\n                const min = centerValue - 222;\n                const max = centerValue + 222;\n                newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n            } else if (randomRangeSelector <= 0.8) {\n                const min = centerValue - 333;\n                const max = centerValue + 333;\n                newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n            } else {\n                const min = centerValue - 1111;\n                const max = centerValue + 1111;\n                newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n            }\n\n            setCurrentValue(newValue);\n        }\n    };\n\n    const generateRandomMultiplier = () => {\n        const rangeSelector = Math.random();\n\n        if (rangeSelector <= 0.4) {\n            return Math.random() * (0.1 - 0.01) + 0.01;\n        } else if (rangeSelector <= 0.7) {\n            return Math.random() * (0.5 - 0.11) + 0.11;\n        } else if (rangeSelector <= 0.8) {\n            return Math.random() * (0.9 - 0.51) + 0.51;\n        } else {\n            return Math.random() * (1 - 0.91) + 0.91;\n        }\n    };\n\n    useEffect(() => {\n        const initialize = async () => {\n            const price = await fetchBitcoinPrice();\n            setCenterValue(price);\n            setPreviousValue(price);\n            setCurrentValue(price);\n            setCurrentValueShow(price);\n        };\n\n        initialize();\n    }, []);\n\n    useEffect(() => {\n        if (centerValue !== null) {\n            generateValue();\n        }\n    }, [centerValue]);\n\n    const startTimer = () => {\n        if (timerIntervalRef.current) {\n            clearInterval(timerIntervalRef.current);\n        }\n\n        setTimer(30);\n        setButtonDisabled(true);\n        timerIntervalRef.current = setInterval(() => {\n            setTimer((prevTimer) => {\n                if (prevTimer <= 1) {\n                    clearInterval(timerIntervalRef.current);\n                    setButtonDisabled(false);\n                    clearFixedLine(); // Убираем линию по завершению таймера\n                    return 0;\n                }\n                return prevTimer - 1;\n            });\n        }, 1000);\n    };\n\n    const drawFixedLine = () => {\n        const fixedLineCanvas = fixedLineCanvasRef.current;\n        const fixedLineCtx = fixedLineCanvas.getContext('2d');\n        const scale = window.devicePixelRatio || 1;\n        fixedLineCanvas.width = 500 * scale;\n        fixedLineCanvas.height = 300 * scale;\n        fixedLineCtx.scale(scale, scale);\n\n        const independentLineY = lastY || 150 - ((previousValue - centerValue) / 1111) * 120;\n\n        fixedLineCtx.clearRect(0, 0, fixedLineCanvas.width / scale, fixedLineCanvas.height / scale);\n\n        fixedLineCtx.strokeStyle = 'yellow';\n        fixedLineCtx.lineWidth = 1;\n        fixedLineCtx.beginPath();\n        fixedLineCtx.moveTo(0, independentLineY);\n        fixedLineCtx.lineTo(fixedLineCanvas.width / scale, independentLineY);\n        fixedLineCtx.stroke();\n\n        startTimer();\n    };\n\n    const clearFixedLine = () => {\n        const fixedLineCanvas = fixedLineCanvasRef.current;\n        const fixedLineCtx = fixedLineCanvas.getContext('2d');\n        fixedLineCtx.clearRect(0, 0, fixedLineCanvas.width, fixedLineCanvas.height);\n    };\n\n    const handleButtonClick = () => {\n        drawFixedLine();\n    };\n\n    useEffect(() => {\n        const startDrawing = () => {\n            const drawRectangle = () => {\n                if (currentValue !== previousValue && previousValue !== null) {\n                    const canvas = canvasRef.current;\n                    const lineCanvas = lineCanvasRef.current;\n                    const ctx = canvas.getContext('2d');\n                    const lineCtx = lineCanvas.getContext('2d');\n\n                    const scale = window.devicePixelRatio || 1;\n                    canvas.width = 500 * scale;\n                    canvas.height = 300 * scale;\n                    lineCanvas.width = 500 * scale;\n                    lineCanvas.height = 300 * scale;\n                    ctx.scale(scale, scale);\n                    lineCtx.scale(scale, scale);\n\n                    const difference = currentValue - previousValue;\n                    let step = difference > 0 ? 1 : -1;\n                    let progress = 0;\n\n                    const startY = lastY !== null ? lastY : 150 - ((previousValue - centerValue) / 1111) * 120;\n                    const targetY = 150 - ((currentValue - centerValue) / 1111) * 120;\n                    const rectWidth = 20;\n\n                    let animationDirection = 1;\n                    let hasReachedTarget = false;\n                    const startTime = Date.now();\n\n                    const interval = setInterval(() => {\n                        const randomMultiplier = generateRandomMultiplier();\n                        progress += step * animationDirection * randomMultiplier;\n\n                        ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n                        lineCtx.clearRect(0, 0, lineCanvas.width / scale, lineCanvas.height / scale);\n\n                        const updatedRectangles = rectangles.map((rect) => ({\n                            ...rect,\n                            x: rect.x - rectWidth,\n                        }));\n\n                        updatedRectangles.forEach((rect) => {\n                            ctx.fillStyle = rect.color;\n                            ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n                        });\n\n                        const height = Math.abs(progress);\n                        let rectY;\n\n                        if (difference > 0) {\n                            rectY = startY - height;\n                        } else {\n                            rectY = startY;\n                        }\n\n                        ctx.fillStyle = difference > 0 ? 'green' : 'red';\n                        ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n\n                        lineCtx.strokeStyle = 'lightblue';\n                        lineCtx.lineWidth = 0.4;\n                        lineCtx.setLineDash([5, 5]);\n                        lineCtx.beginPath();\n\n                        const lineEndX = canvas.width / scale * 0.775;\n                        if (difference > 0) {\n                            lineCtx.moveTo(0, rectY);\n                            lineCtx.lineTo(lineEndX, rectY);\n                        } else {\n                            lineCtx.moveTo(0, rectY + height);\n                            lineCtx.lineTo(lineEndX, rectY + height);\n                        }\n\n                        lineCtx.stroke();\n\n                        const updatedCurrentValueShow = currentValueShow + progress;\n                        const text = updatedCurrentValueShow.toFixed(2);\n                        const textX = lineEndX + 5;\n                        const textY = difference > 0 ? rectY + 3 : rectY + height + 3;\n\n                        lineCtx.font = '10px Arial';\n                        lineCtx.fillStyle = 'white';\n                        lineCtx.fillText(text, textX, textY);\n\n                        if (textX + lineCtx.measureText(text).width > canvas.width / scale) {\n                            ctx.clearRect(canvas.width / scale - 60, textY - 10, 60, 15);\n                            lineCtx.fillText(text, canvas.width / scale - 60, textY);\n                        }\n\n                        if (!hasReachedTarget && Math.abs(progress) >= Math.abs(targetY - startY)) {\n                            animationDirection *= -1;\n                            hasReachedTarget = true;\n                        } else if (hasReachedTarget && Math.abs(progress) <= 2) {\n                            animationDirection *= -1;\n                            hasReachedTarget = false;\n                        }\n\n                        if (Date.now() - startTime >= 5000) {\n                            clearInterval(interval);\n\n                            updatedRectangles.push({\n                                x: canvas.width / scale / 2 - 15,\n                                y: rectY,\n                                width: rectWidth,\n                                height: height,\n                                color: difference > 0 ? 'green' : 'red',\n                            });\n\n                            setRectangles(updatedRectangles);\n                            setLastY(difference > 0 ? rectY : rectY + height);\n                            setPreviousValue(currentValue);\n                            setCurrentValueShow(updatedCurrentValueShow);\n\n                            generateValue();\n                        }\n                    }, 40);\n\n                    animationTimeoutRef.current = interval;\n\n                    return () => clearInterval(interval);\n                }\n            };\n\n            drawRectangle();\n        };\n\n        if (currentValue !== previousValue && previousValue !== null) {\n            startDrawing();\n        }\n    }, [currentValue, previousValue, centerValue, rectangles, lastY]);\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', position: 'relative' }}>\n            <canvas\n                ref={canvasRef}\n                style={{ width: 500, height: 300, border: '1px solid black', marginBottom: '20px' }}\n            ></canvas>\n            <canvas\n                ref={lineCanvasRef}\n                style={{ width: 500, height: 300, position: 'absolute', top: 0, pointerEvents: 'none' }}\n            ></canvas>\n            <canvas\n                ref={fixedLineCanvasRef}\n                style={{ width: 500, height: 300, position: 'absolute', top: 0, pointerEvents: 'none' }}\n            ></canvas>\n            <button onClick={handleButtonClick} disabled={buttonDisabled} style={{ marginTop: '10px' }}>\n                Fix Line for 30 Seconds\n            </button>\n            <div style={{ marginTop: '10px' }}>Time remaining: {timer}s</div>\n        </div>\n    );\n};\n\nexport default Page4;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}