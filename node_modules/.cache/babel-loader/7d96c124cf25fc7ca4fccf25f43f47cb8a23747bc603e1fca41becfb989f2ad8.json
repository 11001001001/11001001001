{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/33/duck/src/Page4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page4 = () => {\n  _s();\n  const [previousValue, setPreviousValue] = useState(null);\n  const [currentValue, setCurrentValue] = useState(null);\n  const [centerValue, setCenterValue] = useState(60600); // Динамический центр\n  const [rectangles, setRectangles] = useState([]); // Массив для хранения прямоугольников\n  const canvasRef = useRef(null);\n  const fetchBitcoinPrice = async () => {\n    try {\n      const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n      const data = await response.json();\n      const bitcoinPrice = Math.floor(data.bpi.USD.rate_float);\n      return bitcoinPrice;\n    } catch (error) {\n      console.error('Ошибка при получении цены биткоина:', error);\n      return 60600; // fallback значение на случай ошибки\n    }\n  };\n  const generateNewValue = async centerValue => {\n    const randomDiff = Math.floor(Math.random() * 691) - 345; // Случайное число от -345 до 345\n    const newValue = centerValue + randomDiff;\n    setCurrentValue(newValue);\n  };\n  useEffect(() => {\n    const adjustCenter = newCenterValue => {\n      setCenterValue(newCenterValue); // Обновляем центр\n    };\n    const drawRectangles = () => {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      const scale = window.devicePixelRatio || 1;\n      canvas.width = 500 * scale;\n      canvas.height = 300 * scale;\n      ctx.scale(scale, scale);\n      ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n      // Смещение всех прямоугольников влево и их рисование\n      rectangles.forEach(rect => {\n        const rectX = rect.x - rect.width; // Смещение влево\n        const rectY = 150 - (rect.value - centerValue) / 345 * 120; // Пересчитываем Y с учетом нового центра\n\n        // Рисуем только те прямоугольники, которые видимы\n        if (rectX + rect.width > 0 && rectX < canvas.width / scale) {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rectX, rectY, rect.width, rect.height);\n        }\n\n        // Обновляем позицию прямоугольника\n        rect.x = rectX;\n        rect.y = rectY;\n      });\n\n      // Обновляем массив прямоугольников, удаляя те, что вышли за левую границу\n      setRectangles(rectangles.filter(rect => rect.x + rect.width > 0));\n    };\n    const drawRectangle = () => {\n      if (currentValue !== previousValue) {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        const scale = window.devicePixelRatio || 1;\n        canvas.width = 500 * scale;\n        canvas.height = 300 * scale;\n        ctx.scale(scale, scale);\n        const difference = currentValue - previousValue;\n        const step = difference > 0 ? 1 : -1;\n        let progress = 0;\n        const startY = 150 - (previousValue - centerValue) / 345 * 120;\n        const targetY = 150 - (currentValue - centerValue) / 345 * 120;\n        const rectWidth = 30;\n        const interval = setInterval(() => {\n          progress += step;\n          ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n          // Смещаем и рисуем все предыдущие прямоугольники\n          drawRectangles();\n\n          // Рисуем текущий прямоугольник\n          const height = Math.abs(progress);\n          const rectY = difference > 0 ? startY - height : startY;\n          ctx.fillStyle = difference > 0 ? 'green' : 'red';\n          ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n          if (Math.abs(progress) >= Math.abs(targetY - startY)) {\n            clearInterval(interval);\n\n            // Добавляем новый прямоугольник в массив\n            rectangles.push({\n              x: canvas.width / scale / 2 - 15,\n              y: rectY,\n              width: rectWidth,\n              height: height,\n              color: difference > 0 ? 'green' : 'red',\n              value: currentValue\n            });\n            setRectangles([...rectangles]);\n            setPreviousValue(currentValue);\n\n            // Если текущее значение выходит за пределы видимости, обновляем центр\n            if (currentValue < centerValue - 345 || currentValue > centerValue + 345) {\n              adjustCenter(currentValue);\n            }\n            generateNewValue(currentValue); // Запускаем процесс для нового значения\n          }\n        }, 20);\n        return () => clearInterval(interval);\n      }\n    };\n    if (currentValue !== null && previousValue !== null) {\n      drawRectangle();\n    }\n  }, [currentValue, previousValue, rectangles, centerValue]);\n  useEffect(() => {\n    const initializeGraph = async () => {\n      const bitcoinPrice = await fetchBitcoinPrice();\n      setPreviousValue(bitcoinPrice);\n      setCurrentValue(bitcoinPrice);\n      setCenterValue(bitcoinPrice); // Инициализируем центр с начальным значением\n      generateNewValue(bitcoinPrice); // Запускаем процесс для первого значения\n    };\n    initializeGraph();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        border: '1px solid black',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), currentValue]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(Page4, \"TdJ4TG7f1bqvaYkCB7upQSZM9hQ=\");\n_c = Page4;\nexport default Page4;\nvar _c;\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Page4","_s","previousValue","setPreviousValue","currentValue","setCurrentValue","centerValue","setCenterValue","rectangles","setRectangles","canvasRef","fetchBitcoinPrice","response","fetch","data","json","bitcoinPrice","Math","floor","bpi","USD","rate_float","error","console","generateNewValue","randomDiff","random","newValue","adjustCenter","newCenterValue","drawRectangles","canvas","current","ctx","getContext","scale","window","devicePixelRatio","width","height","clearRect","forEach","rect","rectX","x","rectY","value","fillStyle","color","fillRect","y","filter","drawRectangle","difference","step","progress","startY","targetY","rectWidth","interval","setInterval","abs","clearInterval","push","initializeGraph","style","display","flexDirection","alignItems","children","ref","border","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/33/duck/src/Page4.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst Page4 = () => {\n  const [previousValue, setPreviousValue] = useState(null);\n  const [currentValue, setCurrentValue] = useState(null);\n  const [centerValue, setCenterValue] = useState(60600); // Динамический центр\n  const [rectangles, setRectangles] = useState([]); // Массив для хранения прямоугольников\n  const canvasRef = useRef(null);\n\n  const fetchBitcoinPrice = async () => {\n    try {\n      const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n      const data = await response.json();\n      const bitcoinPrice = Math.floor(data.bpi.USD.rate_float);\n      return bitcoinPrice;\n    } catch (error) {\n      console.error('Ошибка при получении цены биткоина:', error);\n      return 60600; // fallback значение на случай ошибки\n    }\n  };\n\n  const generateNewValue = async (centerValue) => {\n    const randomDiff = Math.floor(Math.random() * 691) - 345; // Случайное число от -345 до 345\n    const newValue = centerValue + randomDiff;\n    setCurrentValue(newValue);\n  };\n\n  useEffect(() => {\n    const adjustCenter = (newCenterValue) => {\n      setCenterValue(newCenterValue); // Обновляем центр\n    };\n\n    const drawRectangles = () => {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      const scale = window.devicePixelRatio || 1;\n      canvas.width = 500 * scale;\n      canvas.height = 300 * scale;\n      ctx.scale(scale, scale);\n\n      ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n      // Смещение всех прямоугольников влево и их рисование\n      rectangles.forEach((rect) => {\n        const rectX = rect.x - rect.width; // Смещение влево\n        const rectY = 150 - ((rect.value - centerValue) / 345) * 120; // Пересчитываем Y с учетом нового центра\n\n        // Рисуем только те прямоугольники, которые видимы\n        if (rectX + rect.width > 0 && rectX < canvas.width / scale) {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rectX, rectY, rect.width, rect.height);\n        }\n\n        // Обновляем позицию прямоугольника\n        rect.x = rectX;\n        rect.y = rectY;\n      });\n\n      // Обновляем массив прямоугольников, удаляя те, что вышли за левую границу\n      setRectangles(rectangles.filter(rect => rect.x + rect.width > 0));\n    };\n\n    const drawRectangle = () => {\n      if (currentValue !== previousValue) {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        const scale = window.devicePixelRatio || 1;\n        canvas.width = 500 * scale;\n        canvas.height = 300 * scale;\n        ctx.scale(scale, scale);\n\n        const difference = currentValue - previousValue;\n        const step = difference > 0 ? 1 : -1;\n        let progress = 0;\n\n        const startY = 150 - ((previousValue - centerValue) / 345) * 120;\n        const targetY = 150 - ((currentValue - centerValue) / 345) * 120;\n        const rectWidth = 30;\n        const interval = setInterval(() => {\n          progress += step;\n\n          ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n          // Смещаем и рисуем все предыдущие прямоугольники\n          drawRectangles();\n\n          // Рисуем текущий прямоугольник\n          const height = Math.abs(progress);\n          const rectY = difference > 0 ? startY - height : startY;\n          ctx.fillStyle = difference > 0 ? 'green' : 'red';\n          ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n\n          if (Math.abs(progress) >= Math.abs(targetY - startY)) {\n            clearInterval(interval);\n\n            // Добавляем новый прямоугольник в массив\n            rectangles.push({\n              x: canvas.width / scale / 2 - 15,\n              y: rectY,\n              width: rectWidth,\n              height: height,\n              color: difference > 0 ? 'green' : 'red',\n              value: currentValue,\n            });\n\n            setRectangles([...rectangles]);\n            setPreviousValue(currentValue);\n\n            // Если текущее значение выходит за пределы видимости, обновляем центр\n            if (currentValue < centerValue - 345 || currentValue > centerValue + 345) {\n              adjustCenter(currentValue);\n            }\n\n            generateNewValue(currentValue); // Запускаем процесс для нового значения\n          }\n        }, 20);\n\n        return () => clearInterval(interval);\n      }\n    };\n\n    if (currentValue !== null && previousValue !== null) {\n      drawRectangle();\n    }\n  }, [currentValue, previousValue, rectangles, centerValue]);\n\n  useEffect(() => {\n    const initializeGraph = async () => {\n      const bitcoinPrice = await fetchBitcoinPrice();\n      setPreviousValue(bitcoinPrice);\n      setCurrentValue(bitcoinPrice);\n      setCenterValue(bitcoinPrice); // Инициализируем центр с начальным значением\n      generateNewValue(bitcoinPrice); // Запускаем процесс для первого значения\n    };\n\n    initializeGraph();\n  }, []);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <canvas\n        ref={canvasRef}\n        style={{ width: 500, height: 300, border: '1px solid black', marginBottom: '20px' }}\n      ></canvas>\n      {currentValue}\n    </div>\n  );\n};\n\nexport default Page4;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACvD,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAMe,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;EAE9B,MAAMc,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uDAAuD,CAAC;MACrF,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACK,GAAG,CAACC,GAAG,CAACC,UAAU,CAAC;MACxD,OAAOL,YAAY;IACrB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,OAAO,KAAK,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAME,gBAAgB,GAAG,MAAOlB,WAAW,IAAK;IAC9C,MAAMmB,UAAU,GAAGR,IAAI,CAACC,KAAK,CAACD,IAAI,CAACS,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;IAC1D,MAAMC,QAAQ,GAAGrB,WAAW,GAAGmB,UAAU;IACzCpB,eAAe,CAACsB,QAAQ,CAAC;EAC3B,CAAC;EAED/B,SAAS,CAAC,MAAM;IACd,MAAMgC,YAAY,GAAIC,cAAc,IAAK;MACvCtB,cAAc,CAACsB,cAAc,CAAC,CAAC,CAAC;IAClC,CAAC;IAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;MAC3B,MAAMC,MAAM,GAAGrB,SAAS,CAACsB,OAAO;MAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;MAEnC,MAAMC,KAAK,GAAGC,MAAM,CAACC,gBAAgB,IAAI,CAAC;MAC1CN,MAAM,CAACO,KAAK,GAAG,GAAG,GAAGH,KAAK;MAC1BJ,MAAM,CAACQ,MAAM,GAAG,GAAG,GAAGJ,KAAK;MAC3BF,GAAG,CAACE,KAAK,CAACA,KAAK,EAAEA,KAAK,CAAC;MAEvBF,GAAG,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,EAAET,MAAM,CAACO,KAAK,GAAGH,KAAK,EAAEJ,MAAM,CAACQ,MAAM,GAAGJ,KAAK,CAAC;;MAEhE;MACA3B,UAAU,CAACiC,OAAO,CAAEC,IAAI,IAAK;QAC3B,MAAMC,KAAK,GAAGD,IAAI,CAACE,CAAC,GAAGF,IAAI,CAACJ,KAAK,CAAC,CAAC;QACnC,MAAMO,KAAK,GAAG,GAAG,GAAI,CAACH,IAAI,CAACI,KAAK,GAAGxC,WAAW,IAAI,GAAG,GAAI,GAAG,CAAC,CAAC;;QAE9D;QACA,IAAIqC,KAAK,GAAGD,IAAI,CAACJ,KAAK,GAAG,CAAC,IAAIK,KAAK,GAAGZ,MAAM,CAACO,KAAK,GAAGH,KAAK,EAAE;UAC1DF,GAAG,CAACc,SAAS,GAAGL,IAAI,CAACM,KAAK;UAC1Bf,GAAG,CAACgB,QAAQ,CAACN,KAAK,EAAEE,KAAK,EAAEH,IAAI,CAACJ,KAAK,EAAEI,IAAI,CAACH,MAAM,CAAC;QACrD;;QAEA;QACAG,IAAI,CAACE,CAAC,GAAGD,KAAK;QACdD,IAAI,CAACQ,CAAC,GAAGL,KAAK;MAChB,CAAC,CAAC;;MAEF;MACApC,aAAa,CAACD,UAAU,CAAC2C,MAAM,CAACT,IAAI,IAAIA,IAAI,CAACE,CAAC,GAAGF,IAAI,CAACJ,KAAK,GAAG,CAAC,CAAC,CAAC;IACnE,CAAC;IAED,MAAMc,aAAa,GAAGA,CAAA,KAAM;MAC1B,IAAIhD,YAAY,KAAKF,aAAa,EAAE;QAClC,MAAM6B,MAAM,GAAGrB,SAAS,CAACsB,OAAO;QAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;QAEnC,MAAMC,KAAK,GAAGC,MAAM,CAACC,gBAAgB,IAAI,CAAC;QAC1CN,MAAM,CAACO,KAAK,GAAG,GAAG,GAAGH,KAAK;QAC1BJ,MAAM,CAACQ,MAAM,GAAG,GAAG,GAAGJ,KAAK;QAC3BF,GAAG,CAACE,KAAK,CAACA,KAAK,EAAEA,KAAK,CAAC;QAEvB,MAAMkB,UAAU,GAAGjD,YAAY,GAAGF,aAAa;QAC/C,MAAMoD,IAAI,GAAGD,UAAU,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,IAAIE,QAAQ,GAAG,CAAC;QAEhB,MAAMC,MAAM,GAAG,GAAG,GAAI,CAACtD,aAAa,GAAGI,WAAW,IAAI,GAAG,GAAI,GAAG;QAChE,MAAMmD,OAAO,GAAG,GAAG,GAAI,CAACrD,YAAY,GAAGE,WAAW,IAAI,GAAG,GAAI,GAAG;QAChE,MAAMoD,SAAS,GAAG,EAAE;QACpB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;UACjCL,QAAQ,IAAID,IAAI;UAEhBrB,GAAG,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,EAAET,MAAM,CAACO,KAAK,GAAGH,KAAK,EAAEJ,MAAM,CAACQ,MAAM,GAAGJ,KAAK,CAAC;;UAEhE;UACAL,cAAc,CAAC,CAAC;;UAEhB;UACA,MAAMS,MAAM,GAAGtB,IAAI,CAAC4C,GAAG,CAACN,QAAQ,CAAC;UACjC,MAAMV,KAAK,GAAGQ,UAAU,GAAG,CAAC,GAAGG,MAAM,GAAGjB,MAAM,GAAGiB,MAAM;UACvDvB,GAAG,CAACc,SAAS,GAAGM,UAAU,GAAG,CAAC,GAAG,OAAO,GAAG,KAAK;UAChDpB,GAAG,CAACgB,QAAQ,CAAClB,MAAM,CAACO,KAAK,GAAGH,KAAK,GAAG,CAAC,GAAG,EAAE,EAAEU,KAAK,EAAEa,SAAS,EAAEnB,MAAM,CAAC;UAErE,IAAItB,IAAI,CAAC4C,GAAG,CAACN,QAAQ,CAAC,IAAItC,IAAI,CAAC4C,GAAG,CAACJ,OAAO,GAAGD,MAAM,CAAC,EAAE;YACpDM,aAAa,CAACH,QAAQ,CAAC;;YAEvB;YACAnD,UAAU,CAACuD,IAAI,CAAC;cACdnB,CAAC,EAAEb,MAAM,CAACO,KAAK,GAAGH,KAAK,GAAG,CAAC,GAAG,EAAE;cAChCe,CAAC,EAAEL,KAAK;cACRP,KAAK,EAAEoB,SAAS;cAChBnB,MAAM,EAAEA,MAAM;cACdS,KAAK,EAAEK,UAAU,GAAG,CAAC,GAAG,OAAO,GAAG,KAAK;cACvCP,KAAK,EAAE1C;YACT,CAAC,CAAC;YAEFK,aAAa,CAAC,CAAC,GAAGD,UAAU,CAAC,CAAC;YAC9BL,gBAAgB,CAACC,YAAY,CAAC;;YAE9B;YACA,IAAIA,YAAY,GAAGE,WAAW,GAAG,GAAG,IAAIF,YAAY,GAAGE,WAAW,GAAG,GAAG,EAAE;cACxEsB,YAAY,CAACxB,YAAY,CAAC;YAC5B;YAEAoB,gBAAgB,CAACpB,YAAY,CAAC,CAAC,CAAC;UAClC;QACF,CAAC,EAAE,EAAE,CAAC;QAEN,OAAO,MAAM0D,aAAa,CAACH,QAAQ,CAAC;MACtC;IACF,CAAC;IAED,IAAIvD,YAAY,KAAK,IAAI,IAAIF,aAAa,KAAK,IAAI,EAAE;MACnDkD,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAAChD,YAAY,EAAEF,aAAa,EAAEM,UAAU,EAAEF,WAAW,CAAC,CAAC;EAE1DV,SAAS,CAAC,MAAM;IACd,MAAMoE,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,MAAMhD,YAAY,GAAG,MAAML,iBAAiB,CAAC,CAAC;MAC9CR,gBAAgB,CAACa,YAAY,CAAC;MAC9BX,eAAe,CAACW,YAAY,CAAC;MAC7BT,cAAc,CAACS,YAAY,CAAC,CAAC,CAAC;MAC9BQ,gBAAgB,CAACR,YAAY,CAAC,CAAC,CAAC;IAClC,CAAC;IAEDgD,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjE,OAAA;IAAKkE,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,aAAa,EAAE,QAAQ;MAAEC,UAAU,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAC7EtE,OAAA;MACEuE,GAAG,EAAE5D,SAAU;MACfuD,KAAK,EAAE;QAAE3B,KAAK,EAAE,GAAG;QAAEC,MAAM,EAAE,GAAG;QAAEgC,MAAM,EAAE,iBAAiB;QAAEC,YAAY,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7E,CAAC,EACTxE,YAAY;EAAA;IAAAqE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV,CAAC;AAAC3E,EAAA,CAnJID,KAAK;AAAA6E,EAAA,GAAL7E,KAAK;AAqJX,eAAeA,KAAK;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}