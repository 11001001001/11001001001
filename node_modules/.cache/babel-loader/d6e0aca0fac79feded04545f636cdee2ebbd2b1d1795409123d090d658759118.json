{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/33/duck/src/Page4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page4 = () => {\n  _s();\n  const [centerValue, setCenterValue] = useState(null);\n  const [previousValue, setPreviousValue] = useState(null);\n  const [currentValue, setCurrentValue] = useState(null);\n  const [currentValueShow, setCurrentValueShow] = useState(1);\n  const [rectangles, setRectangles] = useState([]);\n  const [lastY, setLastY] = useState(null);\n  const canvasRef = useRef(null);\n  const lineCanvasRef = useRef(null);\n  const animationTimeoutRef = useRef(null);\n  const fetchBitcoinPrice = async () => {\n    try {\n      const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n      const data = await response.json();\n      const price = parseFloat(data.bpi.USD.rate.replace(',', ''));\n      return price;\n    } catch (error) {\n      console.error('Ошибка при получении цены биткоина:', error);\n      return 56000;\n    }\n  };\n  const generateValue = () => {\n    if (centerValue !== null) {\n      const randomRangeSelector = Math.random();\n      let newValue;\n      if (randomRangeSelector <= 0.6) {\n        const min = centerValue - 345;\n        const max = centerValue + 345;\n        newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n      } else if (randomRangeSelector <= 0.8) {\n        const min = centerValue - 500;\n        const max = centerValue + 500;\n        newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n      } else {\n        const min = centerValue - 1990;\n        const max = centerValue + 1990;\n        newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n      setCurrentValue(newValue);\n    }\n  };\n  const generateRandomMultiplier = () => {\n    const rangeSelector = Math.random();\n    if (rangeSelector <= 0.6) {\n      return Math.random() * (0.1 - 0.01) + 0.01;\n    } else if (rangeSelector <= 0.8) {\n      return Math.random() * (0.5 - 0.11) + 0.11;\n    } else if (rangeSelector <= 0.9) {\n      return Math.random() * (0.9 - 0.51) + 0.51;\n    } else {\n      return Math.random() * (1 - 0.91) + 0.91;\n    }\n  };\n  useEffect(() => {\n    const initialize = async () => {\n      const price = await fetchBitcoinPrice();\n      setCenterValue(price);\n      setPreviousValue(price);\n      setCurrentValue(price);\n    };\n    initialize();\n  }, []);\n  useEffect(() => {\n    if (centerValue !== null) {\n      generateValue();\n    }\n  }, [centerValue]);\n  useEffect(() => {\n    const startDrawing = () => {\n      const drawRectangle = () => {\n        if (currentValue !== previousValue && previousValue !== null) {\n          const canvas = canvasRef.current;\n          const lineCanvas = lineCanvasRef.current;\n          const ctx = canvas.getContext('2d');\n          const lineCtx = lineCanvas.getContext('2d');\n          const scale = window.devicePixelRatio || 1;\n          canvas.width = 500 * scale;\n          canvas.height = 300 * scale;\n          lineCanvas.width = 500 * scale;\n          lineCanvas.height = 300 * scale;\n          ctx.scale(scale, scale);\n          lineCtx.scale(scale, scale);\n          const difference = currentValue - previousValue;\n          let step = difference > 0 ? 1 : -1;\n          let progress = 0;\n          const startY = lastY !== null ? lastY : 150 - (previousValue - centerValue) / 1990 * 120;\n          const targetY = 150 - (currentValue - centerValue) / 1990 * 120;\n          const rectWidth = 20;\n          let animationDirection = 1;\n          const startTime = Date.now();\n          const interval = setInterval(() => {\n            const randomMultiplier = generateRandomMultiplier();\n            progress += step * animationDirection * randomMultiplier;\n            ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n            lineCtx.clearRect(0, 0, lineCanvas.width / scale, lineCanvas.height / scale);\n            const updatedRectangles = rectangles.map(rect => ({\n              ...rect,\n              x: rect.x - rectWidth\n            }));\n            updatedRectangles.forEach(rect => {\n              ctx.fillStyle = rect.color;\n              ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n            });\n            const height = Math.abs(progress);\n            let rectY;\n            if (difference > 0) {\n              rectY = startY - height;\n            } else {\n              rectY = startY;\n            }\n            ctx.fillStyle = difference > 0 ? 'green' : 'red';\n            ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n\n            // Настройка перфорированной линии\n            lineCtx.strokeStyle = 'lightblue';\n            lineCtx.lineWidth = 0.4;\n            lineCtx.setLineDash([5, 5]);\n            lineCtx.beginPath();\n            const lineEndX = canvas.width / scale * 0.77;\n            if (difference > 0) {\n              lineCtx.moveTo(0, rectY);\n              lineCtx.lineTo(lineEndX, rectY);\n            } else {\n              lineCtx.moveTo(0, rectY + height);\n              lineCtx.lineTo(lineEndX, rectY + height);\n            }\n            lineCtx.stroke();\n            const updatedCurrentValueShow = currentValue + step * progress;\n            const text = updatedCurrentValueShow.toFixed(2);\n            const textX = lineEndX + 5;\n            const textY = difference > 0 ? rectY + 3 : rectY + height + 3;\n            lineCtx.font = '10px Arial';\n            lineCtx.fillStyle = 'white';\n            lineCtx.fillText(text, textX, textY);\n            if (textX + lineCtx.measureText(text).width > canvas.width / scale) {\n              ctx.clearRect(canvas.width / scale - 60, textY - 10, 60, 15);\n              lineCtx.fillText(text, canvas.width / scale - 60, textY);\n            }\n            if (Math.abs(progress) >= Math.abs(targetY - startY)) {\n              animationDirection *= -1;\n            }\n            if (difference > 0) {\n              setCurrentValueShow(prev => prev + randomMultiplier * animationDirection);\n            } else {\n              setCurrentValueShow(prev => prev - randomMultiplier * animationDirection);\n            }\n            if (Date.now() - startTime >= 5000) {\n              clearInterval(interval);\n              updatedRectangles.push({\n                x: canvas.width / scale / 2 - 15,\n                y: rectY,\n                width: rectWidth,\n                height: height,\n                color: difference > 0 ? 'green' : 'red'\n              });\n              setRectangles(updatedRectangles);\n              setLastY(difference > 0 ? rectY : rectY + height);\n              setPreviousValue(currentValue);\n              generateValue();\n            }\n          }, 25);\n          animationTimeoutRef.current = interval;\n          return () => clearInterval(interval);\n        }\n      };\n      drawRectangle();\n    };\n    if (currentValue !== previousValue && previousValue !== null) {\n      startDrawing();\n    }\n  }, [currentValue, previousValue, centerValue, rectangles, lastY]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        border: '1px solid black',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: lineCanvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        position: 'absolute',\n        pointerEvents: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 9\n  }, this);\n};\n_s(Page4, \"z4hJrwIpYIT/eC4uak8JsmrpQ5o=\");\n_c = Page4;\nexport default Page4;\nvar _c;\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Page4","_s","centerValue","setCenterValue","previousValue","setPreviousValue","currentValue","setCurrentValue","currentValueShow","setCurrentValueShow","rectangles","setRectangles","lastY","setLastY","canvasRef","lineCanvasRef","animationTimeoutRef","fetchBitcoinPrice","response","fetch","data","json","price","parseFloat","bpi","USD","rate","replace","error","console","generateValue","randomRangeSelector","Math","random","newValue","min","max","floor","generateRandomMultiplier","rangeSelector","initialize","startDrawing","drawRectangle","canvas","current","lineCanvas","ctx","getContext","lineCtx","scale","window","devicePixelRatio","width","height","difference","step","progress","startY","targetY","rectWidth","animationDirection","startTime","Date","now","interval","setInterval","randomMultiplier","clearRect","updatedRectangles","map","rect","x","forEach","fillStyle","color","fillRect","y","abs","rectY","strokeStyle","lineWidth","setLineDash","beginPath","lineEndX","moveTo","lineTo","stroke","updatedCurrentValueShow","text","toFixed","textX","textY","font","fillText","measureText","prev","clearInterval","push","style","display","flexDirection","alignItems","children","ref","border","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","position","pointerEvents","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/33/duck/src/Page4.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst Page4 = () => {\n    const [centerValue, setCenterValue] = useState(null);\n    const [previousValue, setPreviousValue] = useState(null);\n    const [currentValue, setCurrentValue] = useState(null);\n    const [currentValueShow, setCurrentValueShow] = useState(1);\n    const [rectangles, setRectangles] = useState([]);\n    const [lastY, setLastY] = useState(null);\n    const canvasRef = useRef(null);\n    const lineCanvasRef = useRef(null);\n    const animationTimeoutRef = useRef(null);\n\n    const fetchBitcoinPrice = async () => {\n        try {\n            const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n            const data = await response.json();\n            const price = parseFloat(data.bpi.USD.rate.replace(',', ''));\n            return price;\n        } catch (error) {\n            console.error('Ошибка при получении цены биткоина:', error);\n            return 56000;\n        }\n    };\n\n    const generateValue = () => {\n        if (centerValue !== null) {\n            const randomRangeSelector = Math.random();\n            let newValue;\n\n            if (randomRangeSelector <= 0.6) {\n                const min = centerValue - 345;\n                const max = centerValue + 345;\n                newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n            } else if (randomRangeSelector <= 0.8) {\n                const min = centerValue - 500;\n                const max = centerValue + 500;\n                newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n            } else {\n                const min = centerValue - 1990;\n                const max = centerValue + 1990;\n                newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n            }\n\n            setCurrentValue(newValue);\n        }\n    };\n\n    const generateRandomMultiplier = () => {\n        const rangeSelector = Math.random();\n\n        if (rangeSelector <= 0.6) {\n            return Math.random() * (0.1 - 0.01) + 0.01;\n        } else if (rangeSelector <= 0.8) {\n            return Math.random() * (0.5 - 0.11) + 0.11;\n        } else if (rangeSelector <= 0.9) {\n            return Math.random() * (0.9 - 0.51) + 0.51;\n        } else {\n            return Math.random() * (1 - 0.91) + 0.91;\n        }\n    };\n\n    useEffect(() => {\n        const initialize = async () => {\n            const price = await fetchBitcoinPrice();\n            setCenterValue(price);\n            setPreviousValue(price);\n            setCurrentValue(price);\n        };\n\n        initialize();\n    }, []);\n\n    useEffect(() => {\n        if (centerValue !== null) {\n            generateValue();\n        }\n    }, [centerValue]);\n\n    useEffect(() => {\n        const startDrawing = () => {\n            const drawRectangle = () => {\n                if (currentValue !== previousValue && previousValue !== null) {\n                    const canvas = canvasRef.current;\n                    const lineCanvas = lineCanvasRef.current;\n                    const ctx = canvas.getContext('2d');\n                    const lineCtx = lineCanvas.getContext('2d');\n\n                    const scale = window.devicePixelRatio || 1;\n                    canvas.width = 500 * scale;\n                    canvas.height = 300 * scale;\n                    lineCanvas.width = 500 * scale;\n                    lineCanvas.height = 300 * scale;\n                    ctx.scale(scale, scale);\n                    lineCtx.scale(scale, scale);\n\n                    const difference = currentValue - previousValue;\n                    let step = difference > 0 ? 1 : -1;\n                    let progress = 0;\n\n                    const startY = lastY !== null ? lastY : 150 - ((previousValue - centerValue) / 1990) * 120;\n                    const targetY = 150 - ((currentValue - centerValue) / 1990) * 120;\n                    const rectWidth = 20;\n\n                    let animationDirection = 1;\n                    const startTime = Date.now();\n\n                    const interval = setInterval(() => {\n                        const randomMultiplier = generateRandomMultiplier();\n                        progress += step * animationDirection * randomMultiplier;\n\n                        ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n                        lineCtx.clearRect(0, 0, lineCanvas.width / scale, lineCanvas.height / scale);\n\n                        const updatedRectangles = rectangles.map((rect) => ({\n                            ...rect,\n                            x: rect.x - rectWidth,\n                        }));\n\n                        updatedRectangles.forEach((rect) => {\n                            ctx.fillStyle = rect.color;\n                            ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n                        });\n\n                        const height = Math.abs(progress);\n                        let rectY;\n\n                        if (difference > 0) {\n                            rectY = startY - height;\n                        } else {\n                            rectY = startY;\n                        }\n\n                        ctx.fillStyle = difference > 0 ? 'green' : 'red';\n                        ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n\n                        // Настройка перфорированной линии\n                        lineCtx.strokeStyle = 'lightblue';\n                        lineCtx.lineWidth = 0.4;\n                        lineCtx.setLineDash([5, 5]);\n                        lineCtx.beginPath();\n\n                        const lineEndX = canvas.width / scale * 0.77;\n                        if (difference > 0) {\n                            lineCtx.moveTo(0, rectY);\n                            lineCtx.lineTo(lineEndX, rectY);\n                        } else {\n                            lineCtx.moveTo(0, rectY + height);\n                            lineCtx.lineTo(lineEndX, rectY + height);\n                        }\n\n                        lineCtx.stroke();\n\n                        const updatedCurrentValueShow = currentValue + step * progress;\n\n                        const text = updatedCurrentValueShow.toFixed(2);\n                        const textX = lineEndX + 5;\n\n                        const textY = difference > 0 ? rectY + 3 : rectY + height + 3;\n\n                        lineCtx.font = '10px Arial';\n                        lineCtx.fillStyle = 'white';\n                        lineCtx.fillText(text, textX, textY);\n\n                        if (textX + lineCtx.measureText(text).width > canvas.width / scale) {\n                            ctx.clearRect(canvas.width / scale - 60, textY - 10, 60, 15);\n                            lineCtx.fillText(text, canvas.width / scale - 60, textY);\n                        }\n\n                        if (Math.abs(progress) >= Math.abs(targetY - startY)) {\n                            animationDirection *= -1;\n                        }\n\n                        if (difference > 0) {\n                            setCurrentValueShow(prev => prev + randomMultiplier * animationDirection);\n                        } else {\n                            setCurrentValueShow(prev => prev - randomMultiplier * animationDirection);\n                        }\n\n                        if (Date.now() - startTime >= 5000) {\n                            clearInterval(interval);\n\n                            updatedRectangles.push({\n                                x: canvas.width / scale / 2 - 15,\n                                y: rectY,\n                                width: rectWidth,\n                                height: height,\n                                color: difference > 0 ? 'green' : 'red',\n                            });\n\n                            setRectangles(updatedRectangles);\n                            setLastY(difference > 0 ? rectY : rectY + height);\n                            setPreviousValue(currentValue);\n\n                            generateValue();\n                        }\n                    }, 25);\n\n                    animationTimeoutRef.current = interval;\n\n                    return () => clearInterval(interval);\n                }\n            };\n\n            drawRectangle();\n        };\n\n        if (currentValue !== previousValue && previousValue !== null) {\n            startDrawing();\n        }\n    }, [currentValue, previousValue, centerValue, rectangles, lastY]);\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n            <canvas\n                ref={canvasRef}\n                style={{ width: 500, height: 300, border: '1px solid black', marginBottom: '20px' }}\n            ></canvas>\n            <canvas\n                ref={lineCanvasRef}\n                style={{ width: 500, height: 300, position: 'absolute', pointerEvents: 'none' }}\n            ></canvas>\n            \n        </div>\n    );\n};\n\nexport default Page4;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}