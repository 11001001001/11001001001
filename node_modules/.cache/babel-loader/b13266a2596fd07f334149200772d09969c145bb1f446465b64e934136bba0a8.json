{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/33/duck/src/Page4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page4 = () => {\n  _s();\n  const [centerValue, setCenterValue] = useState(null);\n  const [previousValue, setPreviousValue] = useState(null);\n  const [currentValue, setCurrentValue] = useState(null);\n  const [currentValueShow, setCurrentValueShow] = useState(1);\n  const [rectangles, setRectangles] = useState([]);\n  const [lastY, setLastY] = useState(null);\n  const [timer, setTimer] = useState(0);\n  const [pointB, setPointB] = useState(0);\n  const [buttonDisabled, setButtonDisabled] = useState(false);\n  const [b, setB] = useState(false);\n  const [s, setS] = useState(false);\n  const [f, setF] = useState(false);\n  const [bColor, setBColor] = useState(false);\n  const [sColor, setSColor] = useState(false);\n  const canvasRef = useRef(null);\n  const lineCanvasRef = useRef(null);\n  const fixedLineCanvasRef = useRef(null);\n  const animationTimeoutRef = useRef(null);\n  const timerIntervalRef = useRef(null);\n  const fetchBitcoinPrice = async () => {\n    try {\n      const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n      const data = await response.json();\n      const price = parseFloat(data.bpi.USD.rate.replace(',', ''));\n      return price;\n    } catch (error) {\n      console.error('Ошибка при получении цены биткоина:', error);\n      return 56000;\n    }\n  };\n  const generateValue = () => {\n    if (centerValue !== null) {\n      const randomRangeSelector = Math.random();\n      let newValue;\n      if (randomRangeSelector <= 0.6) {\n        const min = centerValue - 222;\n        const max = centerValue + 222;\n        newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n      } else if (randomRangeSelector <= 0.8) {\n        const min = centerValue - 333;\n        const max = centerValue + 333;\n        newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n      } else {\n        const min = centerValue - 1111;\n        const max = centerValue + 1111;\n        newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n      setCurrentValue(newValue);\n    }\n  };\n  const generateRandomMultiplier = () => {\n    const rangeSelector = Math.random();\n    if (rangeSelector <= 0.4) {\n      return Math.random() * (0.1 - 0.01) + 0.01;\n    } else if (rangeSelector <= 0.7) {\n      return Math.random() * (0.5 - 0.11) + 0.11;\n    } else if (rangeSelector <= 0.8) {\n      return Math.random() * (0.9 - 0.51) + 0.51;\n    } else {\n      return Math.random() * (1 - 0.91) + 0.91;\n    }\n  };\n  useEffect(() => {\n    const initialize = async () => {\n      const price = await fetchBitcoinPrice();\n      setCenterValue(price);\n      setPreviousValue(price);\n      setCurrentValue(price);\n      setCurrentValueShow(price);\n    };\n    initialize();\n  }, []);\n  useEffect(() => {\n    if (centerValue !== null) {\n      generateValue();\n    }\n  }, [centerValue]);\n  const startTimer = () => {\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n    }\n    setTimer(30);\n    setButtonDisabled(true);\n    timerIntervalRef.current = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer <= 1) {\n          clearInterval(timerIntervalRef.current);\n          setButtonDisabled(false);\n          setPointB(0);\n          setBColor(false);\n          setSColor(false);\n          clearFixedLine(); // Убираем линию по завершению таймера\n          return 0;\n        }\n        return prevTimer - 1;\n      });\n    }, 1000);\n  };\n  const drawFixedLine = () => {\n    const fixedLineCanvas = fixedLineCanvasRef.current;\n    const fixedLineCtx = fixedLineCanvas.getContext('2d');\n    const scale = window.devicePixelRatio || 1;\n\n    // Устанавливаем размеры холста под устройство\n    fixedLineCanvas.width = window.innerWidth * scale;\n    fixedLineCanvas.height = 300 * scale;\n    fixedLineCtx.scale(scale, scale);\n    const independentLineY = lastY || 150 - (previousValue - centerValue) / 1111 * 120;\n    const pointBValue = currentValueShow.toFixed(2);\n    setPointB(pointBValue);\n\n    // Вычисляем ширину текста pointB\n    fixedLineCtx.font = '9px Arial';\n    const textWidth = fixedLineCtx.measureText(pointBValue).width;\n\n    // Линия заканчивается за 5 пикселей до текста pointB\n    const lineEndX = fixedLineCanvas.width / scale - textWidth - 10; // 5 пикселей отступ для текста и 5 пикселей до текста\n\n    fixedLineCtx.clearRect(0, 0, fixedLineCanvas.width / scale, fixedLineCanvas.height / scale);\n    fixedLineCtx.strokeStyle = 'yellow';\n    fixedLineCtx.lineWidth = 0.5;\n    fixedLineCtx.beginPath();\n    fixedLineCtx.moveTo(0, independentLineY);\n    fixedLineCtx.lineTo(lineEndX, independentLineY);\n    fixedLineCtx.stroke();\n\n    // Размещаем текст pointB на 5 пикселей справа от линии\n    fixedLineCtx.fillStyle = 'white';\n    fixedLineCtx.fillText(pointBValue, lineEndX + 5, independentLineY + 3);\n    setB(false);\n    setS(false);\n    startTimer();\n  };\n  const clearFixedLine = () => {\n    const fixedLineCanvas = fixedLineCanvasRef.current;\n    const fixedLineCtx = fixedLineCanvas.getContext('2d');\n    fixedLineCtx.clearRect(0, 0, fixedLineCanvas.width, fixedLineCanvas.height);\n  };\n  const handleButtonClickB = () => {\n    setB(true);\n    setF(true);\n    setBColor(true);\n  };\n  const handleButtonClickS = () => {\n    setS(true);\n    setF(true);\n    setSColor(true);\n  };\n  useEffect(() => {\n    const startDrawing = () => {\n      const drawRectangle = () => {\n        if (currentValue !== previousValue && previousValue !== null) {\n          const canvas = canvasRef.current;\n          const lineCanvas = lineCanvasRef.current;\n          const ctx = canvas.getContext('2d');\n          const lineCtx = lineCanvas.getContext('2d');\n          const scale = window.devicePixelRatio || 1;\n          canvas.width = window.innerWidth * scale;\n          canvas.height = 300 * scale;\n          lineCanvas.width = window.innerWidth * scale;\n          lineCanvas.height = 300 * scale;\n          ctx.scale(scale, scale);\n          lineCtx.scale(scale, scale);\n          const difference = currentValue - previousValue;\n          let step = difference > 0 ? 1 : -1;\n          let progress = 0;\n          const startY = lastY !== null ? lastY : 150 - (previousValue - centerValue) / 1111 * 120;\n          const targetY = 150 - (currentValue - centerValue) / 1111 * 120;\n          const rectWidth = 20;\n          if (b || s) {\n            drawFixedLine();\n          }\n          let animationDirection = 1;\n          let hasReachedTarget = false;\n          const startTime = Date.now();\n          const interval = setInterval(() => {\n            const randomMultiplier = generateRandomMultiplier();\n            progress += step * animationDirection * randomMultiplier;\n            const updatedCurrentValueShow = currentValueShow + progress;\n            const text = updatedCurrentValueShow.toFixed(2);\n            ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n            lineCtx.clearRect(0, 0, lineCanvas.width / scale, lineCanvas.height / scale);\n            const updatedRectangles = rectangles.map(rect => ({\n              ...rect,\n              x: rect.x - rectWidth\n            }));\n            updatedRectangles.forEach(rect => {\n              ctx.fillStyle = rect.color;\n              ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n            });\n            const height = Math.abs(progress);\n            let rectY;\n            if (difference > 0) {\n              rectY = startY - height;\n            } else {\n              rectY = startY;\n            }\n            ctx.fillStyle = difference > 0 ? 'green' : 'red';\n            ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n            let strokeColor = 'lightblue'; // Default color\n\n            if (bColor && updatedCurrentValueShow >= f ? currentValueShow : pointB) {\n              strokeColor = 'green';\n            } else if (sColor && updatedCurrentValueShow <= f ? currentValueShow : pointB) {\n              strokeColor = 'green';\n            } else if (bColor && updatedCurrentValueShow < f ? currentValueShow : pointB) {\n              strokeColor = 'red';\n            } else if (sColor && updatedCurrentValueShow > f ? currentValueShow : pointB) {\n              strokeColor = 'red';\n            }\n            lineCtx.strokeStyle = strokeColor;\n            lineCtx.lineWidth = 0.5;\n            lineCtx.setLineDash([5, 5]);\n            lineCtx.beginPath();\n            const textWidth = lineCtx.measureText(text).width;\n            const lineEndX = canvas.width / scale - textWidth - 10;\n            if (difference > 0) {\n              lineCtx.moveTo(0, rectY);\n              lineCtx.lineTo(lineEndX, rectY);\n            } else {\n              lineCtx.moveTo(0, rectY + height);\n              lineCtx.lineTo(lineEndX, rectY + height);\n            }\n            lineCtx.stroke();\n            const textX = lineEndX + 5;\n            const textY = difference > 0 ? rectY + 3 : rectY + height + 3;\n            lineCtx.font = '9px Arial';\n            lineCtx.fillStyle = strokeColor;\n            lineCtx.fillText(text, textX, textY);\n            if (textX + lineCtx.measureText(text).width > canvas.width / scale) {\n              ctx.clearRect(canvas.width / scale - 60, textY - 10, 60, 15);\n              lineCtx.fillText(text, canvas.width / scale - 60, textY);\n            }\n            if (!hasReachedTarget && Math.abs(progress) >= Math.abs(targetY - startY)) {\n              animationDirection *= -1;\n              hasReachedTarget = true;\n            } else if (hasReachedTarget && Math.abs(progress) <= 2) {\n              animationDirection *= -1;\n              hasReachedTarget = false;\n            }\n            if (Date.now() - startTime >= 5000) {\n              clearInterval(interval);\n              updatedRectangles.push({\n                x: canvas.width / scale / 2 - 15,\n                y: rectY,\n                width: rectWidth,\n                height: height,\n                color: difference > 0 ? 'green' : 'red'\n              });\n              setRectangles(updatedRectangles);\n              setLastY(difference > 0 ? rectY : rectY + height);\n              setPreviousValue(currentValue);\n              setCurrentValueShow(updatedCurrentValueShow);\n              generateValue();\n            }\n          }, 40);\n          animationTimeoutRef.current = interval;\n          return () => clearInterval(interval);\n        }\n      };\n      drawRectangle();\n    };\n    if (currentValue !== previousValue && previousValue !== null) {\n      startDrawing();\n    }\n  }, [currentValue, previousValue, centerValue, rectangles, lastY]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: window.innerWidth,\n        height: 300,\n        border: '1px solid black',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: lineCanvasRef,\n      style: {\n        width: window.innerWidth,\n        height: 300,\n        position: 'absolute',\n        top: 0,\n        pointerEvents: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: fixedLineCanvasRef,\n      style: {\n        width: window.innerWidth,\n        height: 300,\n        position: 'absolute',\n        top: 0,\n        pointerEvents: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClickB,\n      disabled: buttonDisabled,\n      style: {\n        marginTop: '10px'\n      },\n      children: \"Buy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClickS,\n      disabled: buttonDisabled,\n      style: {\n        marginTop: '10px'\n      },\n      children: \"Sell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: [\"Time remaining: \", timer, \"s \", pointB ? pointB : \"\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 9\n  }, this);\n};\n_s(Page4, \"rp0nEO8q7LEEEI4CEKiYzXP/V4E=\");\n_c = Page4;\nexport default Page4;\nvar _c;\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Page4","_s","centerValue","setCenterValue","previousValue","setPreviousValue","currentValue","setCurrentValue","currentValueShow","setCurrentValueShow","rectangles","setRectangles","lastY","setLastY","timer","setTimer","pointB","setPointB","buttonDisabled","setButtonDisabled","b","setB","s","setS","f","setF","bColor","setBColor","sColor","setSColor","canvasRef","lineCanvasRef","fixedLineCanvasRef","animationTimeoutRef","timerIntervalRef","fetchBitcoinPrice","response","fetch","data","json","price","parseFloat","bpi","USD","rate","replace","error","console","generateValue","randomRangeSelector","Math","random","newValue","min","max","floor","generateRandomMultiplier","rangeSelector","initialize","startTimer","current","clearInterval","setInterval","prevTimer","clearFixedLine","drawFixedLine","fixedLineCanvas","fixedLineCtx","getContext","scale","window","devicePixelRatio","width","innerWidth","height","independentLineY","pointBValue","toFixed","font","textWidth","measureText","lineEndX","clearRect","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","fillStyle","fillText","handleButtonClickB","handleButtonClickS","startDrawing","drawRectangle","canvas","lineCanvas","ctx","lineCtx","difference","step","progress","startY","targetY","rectWidth","animationDirection","hasReachedTarget","startTime","Date","now","interval","randomMultiplier","updatedCurrentValueShow","text","updatedRectangles","map","rect","x","forEach","color","fillRect","y","abs","rectY","strokeColor","setLineDash","textX","textY","push","style","display","flexDirection","alignItems","position","children","ref","border","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","top","pointerEvents","onClick","disabled","marginTop","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/33/duck/src/Page4.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst Page4 = () => {\n    const [centerValue, setCenterValue] = useState(null);\n    const [previousValue, setPreviousValue] = useState(null);\n    const [currentValue, setCurrentValue] = useState(null);\n    const [currentValueShow, setCurrentValueShow] = useState(1);\n    const [rectangles, setRectangles] = useState([]);\n    const [lastY, setLastY] = useState(null);\n    const [timer, setTimer] = useState(0);\n    const [pointB, setPointB] = useState(0);\n    const [buttonDisabled, setButtonDisabled] = useState(false);\n    const [b, setB] = useState(false);\n    const [s, setS] = useState(false);\n    const [f, setF] = useState(false);\n    const [bColor, setBColor] = useState(false);\n    const [sColor, setSColor] = useState(false);\n    const canvasRef = useRef(null);\n    const lineCanvasRef = useRef(null);\n    const fixedLineCanvasRef = useRef(null);\n    const animationTimeoutRef = useRef(null);\n    const timerIntervalRef = useRef(null);\n\n    const fetchBitcoinPrice = async () => {\n        try {\n            const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n            const data = await response.json();\n            const price = parseFloat(data.bpi.USD.rate.replace(',', ''));\n            return price;\n        } catch (error) {\n            console.error('Ошибка при получении цены биткоина:', error);\n            return 56000;\n        }\n    };\n\n    const generateValue = () => {\n        if (centerValue !== null) {\n            const randomRangeSelector = Math.random();\n            let newValue;\n\n            if (randomRangeSelector <= 0.6) {\n                const min = centerValue - 222;\n                const max = centerValue + 222;\n                newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n            } else if (randomRangeSelector <= 0.8) {\n                const min = centerValue - 333;\n                const max = centerValue + 333;\n                newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n            } else {\n                const min = centerValue - 1111;\n                const max = centerValue + 1111;\n                newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n            }\n\n            setCurrentValue(newValue);\n        }\n    };\n\n    const generateRandomMultiplier = () => {\n        const rangeSelector = Math.random();\n\n        if (rangeSelector <= 0.4) {\n            return Math.random() * (0.1 - 0.01) + 0.01;\n        } else if (rangeSelector <= 0.7) {\n            return Math.random() * (0.5 - 0.11) + 0.11;\n        } else if (rangeSelector <= 0.8) {\n            return Math.random() * (0.9 - 0.51) + 0.51;\n        } else {\n            return Math.random() * (1 - 0.91) + 0.91;\n        }\n    };\n\n    useEffect(() => {\n        const initialize = async () => {\n            const price = await fetchBitcoinPrice();\n            setCenterValue(price);\n            setPreviousValue(price);\n            setCurrentValue(price);\n            setCurrentValueShow(price);\n        };\n\n        initialize();\n    }, []);\n\n    useEffect(() => {\n        if (centerValue !== null) {\n            generateValue();\n        }\n    }, [centerValue]);\n\n    const startTimer = () => {\n        if (timerIntervalRef.current) {\n            clearInterval(timerIntervalRef.current);\n        }\n\n        setTimer(30);\n        setButtonDisabled(true);\n        timerIntervalRef.current = setInterval(() => {\n            setTimer((prevTimer) => {\n                if (prevTimer <= 1) {\n                    clearInterval(timerIntervalRef.current);\n                    setButtonDisabled(false);\n                    setPointB(0);\n                    setBColor(false)\n                    setSColor(false)\n                    clearFixedLine(); // Убираем линию по завершению таймера\n                    return 0;\n                }\n                return prevTimer - 1;\n            });\n        }, 1000);\n    };\n\n    const drawFixedLine = () => {\n        const fixedLineCanvas = fixedLineCanvasRef.current;\n        const fixedLineCtx = fixedLineCanvas.getContext('2d');\n        const scale = window.devicePixelRatio || 1;\n    \n        // Устанавливаем размеры холста под устройство\n        fixedLineCanvas.width = window.innerWidth * scale;\n        fixedLineCanvas.height = 300 * scale;\n        fixedLineCtx.scale(scale, scale);\n    \n        const independentLineY = lastY || 150 - ((previousValue - centerValue) / 1111) * 120;\n        const pointBValue = currentValueShow.toFixed(2);\n        setPointB(pointBValue);\n    \n        // Вычисляем ширину текста pointB\n        fixedLineCtx.font = '9px Arial';\n        const textWidth = fixedLineCtx.measureText(pointBValue).width;\n    \n        // Линия заканчивается за 5 пикселей до текста pointB\n        const lineEndX = fixedLineCanvas.width / scale - textWidth - 10; // 5 пикселей отступ для текста и 5 пикселей до текста\n    \n        fixedLineCtx.clearRect(0, 0, fixedLineCanvas.width / scale, fixedLineCanvas.height / scale);\n    \n        fixedLineCtx.strokeStyle = 'yellow';\n        fixedLineCtx.lineWidth = 0.5;\n        fixedLineCtx.beginPath();\n        fixedLineCtx.moveTo(0, independentLineY);\n        fixedLineCtx.lineTo(lineEndX, independentLineY);\n        fixedLineCtx.stroke();\n    \n        // Размещаем текст pointB на 5 пикселей справа от линии\n        fixedLineCtx.fillStyle = 'white';\n        fixedLineCtx.fillText(pointBValue, lineEndX + 5, independentLineY + 3);\n    \n        setB(false);\n        setS(false);\n    \n        startTimer();\n    };\n    \n\n    const clearFixedLine = () => {\n        const fixedLineCanvas = fixedLineCanvasRef.current;\n        const fixedLineCtx = fixedLineCanvas.getContext('2d');\n        fixedLineCtx.clearRect(0, 0, fixedLineCanvas.width, fixedLineCanvas.height);\n    };\n\n    const handleButtonClickB = () => {\n        setB(true)\n        setF(true)\n        setBColor(true)\n    };\n    const handleButtonClickS = () => {\n        setS(true)\n        setF(true)\n        setSColor(true)\n    };\n\n    useEffect(() => {\n        const startDrawing = () => {\n            const drawRectangle = () => {\n                if (currentValue !== previousValue && previousValue !== null) {\n                    const canvas = canvasRef.current;\n                    const lineCanvas = lineCanvasRef.current;\n                    const ctx = canvas.getContext('2d');\n                    const lineCtx = lineCanvas.getContext('2d');\n\n                    const scale = window.devicePixelRatio || 1;\n                    canvas.width = window.innerWidth * scale;\n                    canvas.height = 300 * scale;\n                    lineCanvas.width = window.innerWidth * scale;\n                    lineCanvas.height = 300 * scale;\n                    ctx.scale(scale, scale);\n                    lineCtx.scale(scale, scale);\n\n                    const difference = currentValue - previousValue;\n                    let step = difference > 0 ? 1 : -1;\n                    let progress = 0;\n\n                    const startY = lastY !== null ? lastY : 150 - ((previousValue - centerValue) / 1111) * 120;\n                    const targetY = 150 - ((currentValue - centerValue) / 1111) * 120;\n                    const rectWidth = 20;\n\n                    if (b || s) {\n                        drawFixedLine();\n                    }\n\n                    let animationDirection = 1;\n                    let hasReachedTarget = false;\n                    const startTime = Date.now();\n\n                    const interval = setInterval(() => {\n                        const randomMultiplier = generateRandomMultiplier();\n                        progress += step * animationDirection * randomMultiplier;\n                        const updatedCurrentValueShow = currentValueShow + progress;\n                        const text = updatedCurrentValueShow.toFixed(2);\n                        ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n                        lineCtx.clearRect(0, 0, lineCanvas.width / scale, lineCanvas.height / scale);\n\n                        const updatedRectangles = rectangles.map((rect) => ({\n                            ...rect,\n                            x: rect.x - rectWidth,\n                        }));\n\n                        updatedRectangles.forEach((rect) => {\n                            ctx.fillStyle = rect.color;\n                            ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n                        });\n\n                        const height = Math.abs(progress);\n                        let rectY;\n\n                        if (difference > 0) {\n                            rectY = startY - height;\n                        } else {\n                            rectY = startY;\n                        }\n\n                        ctx.fillStyle = difference > 0 ? 'green' : 'red';\n                        ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n\n                        let strokeColor = 'lightblue'; // Default color\n\n                        if (bColor && updatedCurrentValueShow >= f ? currentValueShow : pointB) {\n                            strokeColor = 'green';\n                        } else if (sColor && updatedCurrentValueShow <= f ? currentValueShow : pointB) {\n                            strokeColor = 'green';\n                        } else if (bColor && updatedCurrentValueShow < f ? currentValueShow : pointB) {\n                            strokeColor = 'red';\n                        } else if (sColor && updatedCurrentValueShow > f ? currentValueShow : pointB) {\n                            strokeColor = 'red';\n                        }\n\n                        lineCtx.strokeStyle = strokeColor;\n                        lineCtx.lineWidth = 0.5;\n                        lineCtx.setLineDash([5, 5]);\n                        lineCtx.beginPath();\n                        \n                        const textWidth = lineCtx.measureText(text).width;\n                        const lineEndX = canvas.width / scale - textWidth - 10;\n                        if (difference > 0) {\n                            lineCtx.moveTo(0, rectY);\n                            lineCtx.lineTo(lineEndX, rectY);\n                        } else {\n                            lineCtx.moveTo(0, rectY + height);\n                            lineCtx.lineTo(lineEndX, rectY + height);\n                        }\n\n                        lineCtx.stroke();\n\n                        \n                        const textX = lineEndX + 5;\n                        const textY = difference > 0 ? rectY + 3 : rectY + height + 3;\n                        \n                        lineCtx.font = '9px Arial';\n                        lineCtx.fillStyle = strokeColor;\n                        lineCtx.fillText(text, textX, textY);\n\n                        if (textX + lineCtx.measureText(text).width > canvas.width / scale) {\n                            ctx.clearRect(canvas.width / scale - 60, textY - 10, 60, 15);\n                            lineCtx.fillText(text, canvas.width / scale - 60, textY);\n                        }\n\n                        if (!hasReachedTarget && Math.abs(progress) >= Math.abs(targetY - startY)) {\n                            animationDirection *= -1;\n                            hasReachedTarget = true;\n                        } else if (hasReachedTarget && Math.abs(progress) <= 2) {\n                            animationDirection *= -1;\n                            hasReachedTarget = false;\n                        }\n\n                        if (Date.now() - startTime >= 5000) {\n                            clearInterval(interval);\n\n                            updatedRectangles.push({\n                                x: canvas.width / scale / 2 - 15,\n                                y: rectY,\n                                width: rectWidth,\n                                height: height,\n                                color: difference > 0 ? 'green' : 'red',\n                            });\n\n                            setRectangles(updatedRectangles);\n                            setLastY(difference > 0 ? rectY : rectY + height);\n                            setPreviousValue(currentValue);\n                            setCurrentValueShow(updatedCurrentValueShow);\n\n                            generateValue();\n                        }\n                    }, 40);\n\n                    animationTimeoutRef.current = interval;\n\n                    return () => clearInterval(interval);\n                }\n            };\n\n            drawRectangle();\n        };\n\n        if (currentValue !== previousValue && previousValue !== null) {\n            startDrawing();\n        }\n    }, [currentValue, previousValue, centerValue, rectangles, lastY]);\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', position: 'relative' }}>\n            <canvas\n                ref={canvasRef}\n                style={{ width: window.innerWidth, height: 300, border: '1px solid black', marginBottom: '20px' }}\n            ></canvas>\n            <canvas\n                ref={lineCanvasRef}\n                style={{ width: window.innerWidth, height: 300, position: 'absolute', top: 0, pointerEvents: 'none' }}\n            ></canvas>\n            <canvas\n                ref={fixedLineCanvasRef}\n                style={{ width: window.innerWidth, height: 300, position: 'absolute', top: 0, pointerEvents: 'none' }}\n            ></canvas>\n            <button onClick={handleButtonClickB} disabled={buttonDisabled} style={{ marginTop: '10px' }}>\n                Buy\n            </button>\n            <button onClick={handleButtonClickS} disabled={buttonDisabled} style={{ marginTop: '10px' }}>\n                Sell\n            </button>\n            <div style={{ marginTop: '10px' }}>Time remaining: {timer}s {pointB ? pointB : \"\"} </div>\n        </div>\n    );\n};\n\nexport default Page4;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}