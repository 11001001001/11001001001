{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/33/duck/src/Page4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page4 = () => {\n  _s();\n  const [candles, setCandles] = useState([]);\n  const [currentValue, setCurrentValue] = useState(100);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const newValue = currentValue + (Math.random() * 20 - 10); // Генерация случайного значения\n      setCandles(prevCandles => [...prevCandles, {\n        open: currentValue,\n        close: newValue\n      }]);\n      setCurrentValue(newValue);\n    }, 3000); // Каждые 3 секунды генерируем новую свечу\n\n    return () => clearInterval(interval);\n  }, [currentValue]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = 30; // Ширина свечи\n    const centerX = canvas.width / 2; // Центр канваса по оси X\n    const centerY = canvas.height / 2; // Центр канваса по оси Y\n    let offset = 0; // Смещение для новых свечей\n\n    const drawCandle = (candle, x, callback) => {\n      const color = candle.close >= candle.open ? 'green' : 'red';\n      const height = Math.abs(candle.close - candle.open);\n      const y = centerY - (candle.close >= candle.open ? candle.close : candle.open);\n      let currentX = x;\n      const targetX = x - width;\n      const drawStep = () => {\n        if (currentX > targetX) {\n          ctx.fillStyle = color;\n          ctx.fillRect(currentX, y, 1, height);\n          currentX -= 1;\n          setTimeout(drawStep, 20); // Рисуем по 1 пикселю каждые 20 мс\n        } else if (callback) {\n          callback();\n        }\n      };\n      drawStep();\n    };\n    const drawCandles = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // Очищаем канвас перед каждым перерисовыванием\n\n      candles.slice(-10).forEach((candle, index) => {\n        const x = centerX - offset + index * width; // Смещение свечи\n        drawCandle(candle, x, () => {\n          if (index === candles.length - 1) {\n            offset += width; // Увеличиваем смещение после рисования последней свечи\n          }\n        });\n      });\n    };\n    drawCandles();\n  }, [candles]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 400,\n      style: {\n        border: '1px solid #000'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(Page4, \"9QBma4OxL33Xd8sS3oyTx+4Alis=\");\n_c = Page4;\nexport default Page4;\nvar _c;\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Page4","_s","candles","setCandles","currentValue","setCurrentValue","canvasRef","interval","setInterval","newValue","Math","random","prevCandles","open","close","clearInterval","canvas","current","ctx","getContext","width","centerX","centerY","height","offset","drawCandle","candle","x","callback","color","abs","y","currentX","targetX","drawStep","fillStyle","fillRect","setTimeout","drawCandles","clearRect","slice","forEach","index","length","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/33/duck/src/Page4.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst Page4 = () => {\n    const [candles, setCandles] = useState([]);\n    const [currentValue, setCurrentValue] = useState(100);\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            const newValue = currentValue + (Math.random() * 20 - 10); // Генерация случайного значения\n            setCandles((prevCandles) => [...prevCandles, { open: currentValue, close: newValue }]);\n            setCurrentValue(newValue);\n        }, 3000); // Каждые 3 секунды генерируем новую свечу\n\n        return () => clearInterval(interval);\n    }, [currentValue]);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        const width = 30; // Ширина свечи\n        const centerX = canvas.width / 2; // Центр канваса по оси X\n        const centerY = canvas.height / 2; // Центр канваса по оси Y\n        let offset = 0; // Смещение для новых свечей\n\n        const drawCandle = (candle, x, callback) => {\n            const color = candle.close >= candle.open ? 'green' : 'red';\n            const height = Math.abs(candle.close - candle.open);\n            const y = centerY - (candle.close >= candle.open ? candle.close : candle.open);\n\n            let currentX = x;\n            const targetX = x - width;\n\n            const drawStep = () => {\n                if (currentX > targetX) {\n                    ctx.fillStyle = color;\n                    ctx.fillRect(currentX, y, 1, height);\n                    currentX -= 1;\n                    setTimeout(drawStep, 20); // Рисуем по 1 пикселю каждые 20 мс\n                } else if (callback) {\n                    callback();\n                }\n            };\n\n            drawStep();\n        };\n\n        const drawCandles = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height); // Очищаем канвас перед каждым перерисовыванием\n\n            candles.slice(-10).forEach((candle, index) => {\n                const x = centerX - offset + (index * width); // Смещение свечи\n                drawCandle(candle, x, () => {\n                    if (index === candles.length - 1) {\n                        offset += width; // Увеличиваем смещение после рисования последней свечи\n                    }\n                });\n            });\n        };\n\n        drawCandles();\n    }, [candles]);\n\n    return (\n        <div>\n            <canvas ref={canvasRef} width={800} height={400} style={{ border: '1px solid #000' }} />\n        </div>\n    );\n};\n\nexport default Page4;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}