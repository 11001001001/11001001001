{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/33/duck/src/Page4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page4 = () => {\n  _s();\n  const [centerValue, setCenterValue] = useState(null);\n  const [previousValue, setPreviousValue] = useState(null);\n  const [currentValue, setCurrentValue] = useState(null);\n  const [currentValueShow, setCurrentValueShow] = useState(1);\n  const [rectangles, setRectangles] = useState([]);\n  const [lastY, setLastY] = useState(null);\n  const [showTemporaryLine, setShowTemporaryLine] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const canvasRef = useRef(null);\n  const lineCanvasRef = useRef(null);\n  const tempLineCanvasRef = useRef(null);\n  const animationTimeoutRef = useRef(null);\n  const tempLineTimeoutRef = useRef(null);\n  const fetchBitcoinPrice = async () => {\n    try {\n      const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n      const data = await response.json();\n      const price = parseFloat(data.bpi.USD.rate.replace(',', ''));\n      return price;\n    } catch (error) {\n      console.error('Ошибка при получении цены биткоина:', error);\n      return 56000;\n    }\n  };\n  const generateValue = () => {\n    if (centerValue !== null) {\n      const randomRangeSelector = Math.random();\n      let newValue;\n      if (randomRangeSelector <= 0.6) {\n        const min = centerValue - 222;\n        const max = centerValue + 222;\n        newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n      } else if (randomRangeSelector <= 0.8) {\n        const min = centerValue - 333;\n        const max = centerValue + 333;\n        newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n      } else {\n        const min = centerValue - 1111;\n        const max = centerValue + 1111;\n        newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n      setCurrentValue(newValue);\n    }\n  };\n  const generateRandomMultiplier = () => {\n    const rangeSelector = Math.random();\n    if (rangeSelector <= 0.4) {\n      return Math.random() * (0.1 - 0.01) + 0.01;\n    } else if (rangeSelector <= 0.7) {\n      return Math.random() * (0.5 - 0.11) + 0.11;\n    } else if (rangeSelector <= 0.8) {\n      return Math.random() * (0.9 - 0.51) + 0.51;\n    } else {\n      return Math.random() * (1 - 0.91) + 0.91;\n    }\n  };\n  useEffect(() => {\n    const initialize = async () => {\n      const price = await fetchBitcoinPrice();\n      setCenterValue(price);\n      setPreviousValue(price);\n      setCurrentValue(price);\n      setCurrentValueShow(price);\n    };\n    initialize();\n  }, []);\n  useEffect(() => {\n    if (centerValue !== null) {\n      generateValue();\n    }\n  }, [centerValue]);\n  useEffect(() => {\n    const startDrawing = () => {\n      const drawRectangle = () => {\n        if (currentValue !== previousValue && previousValue !== null) {\n          const canvas = canvasRef.current;\n          const lineCanvas = lineCanvasRef.current;\n          const tempLineCanvas = tempLineCanvasRef.current;\n          const ctx = canvas.getContext('2d');\n          const lineCtx = lineCanvas.getContext('2d');\n          const tempLineCtx = tempLineCanvas.getContext('2d');\n          const scale = window.devicePixelRatio || 1;\n          canvas.width = 500 * scale;\n          canvas.height = 300 * scale;\n          lineCanvas.width = 500 * scale;\n          lineCanvas.height = 300 * scale;\n          tempLineCanvas.width = 500 * scale;\n          tempLineCanvas.height = 300 * scale;\n          ctx.scale(scale, scale);\n          lineCtx.scale(scale, scale);\n          tempLineCtx.scale(scale, scale);\n          const difference = currentValue - previousValue;\n          let step = difference > 0 ? 1 : -1;\n          let progress = 0;\n          const startY = lastY !== null ? lastY : 150 - (previousValue - centerValue) / 1111 * 120;\n          const targetY = 150 - (currentValue - centerValue) / 1111 * 120;\n          const rectWidth = 20;\n          let animationDirection = 1;\n          let hasReachedTarget = false;\n          const startTime = Date.now();\n          const interval = setInterval(() => {\n            const randomMultiplier = generateRandomMultiplier();\n            progress += step * animationDirection * randomMultiplier;\n            ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n            lineCtx.clearRect(0, 0, lineCanvas.width / scale, lineCanvas.height / scale);\n            tempLineCtx.clearRect(0, 0, tempLineCanvas.width / scale, tempLineCanvas.height / scale);\n            const updatedRectangles = rectangles.map(rect => ({\n              ...rect,\n              x: rect.x - rectWidth\n            }));\n            updatedRectangles.forEach(rect => {\n              ctx.fillStyle = rect.color;\n              ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n            });\n            const height = Math.abs(progress);\n            let rectY;\n            if (difference > 0) {\n              rectY = startY - height;\n            } else {\n              rectY = startY;\n            }\n            ctx.fillStyle = difference > 0 ? 'green' : 'red';\n            ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n\n            // Настройка перфорированной линии\n            lineCtx.strokeStyle = 'lightblue';\n            lineCtx.lineWidth = 0.4;\n            lineCtx.setLineDash([5, 5]);\n            lineCtx.beginPath();\n            const lineEndX = canvas.width / scale * 0.775;\n            if (difference > 0) {\n              lineCtx.moveTo(0, rectY);\n              lineCtx.lineTo(lineEndX, rectY);\n            } else {\n              lineCtx.moveTo(0, rectY + height);\n              lineCtx.lineTo(lineEndX, rectY + height);\n            }\n            lineCtx.stroke();\n            const updatedCurrentValueShow = currentValueShow + progress;\n            const text = updatedCurrentValueShow.toFixed(2);\n            const textX = lineEndX + 5;\n            const textY = difference > 0 ? rectY + 3 : rectY + height + 3;\n            lineCtx.font = '10px Arial';\n            lineCtx.fillStyle = 'white';\n            lineCtx.fillText(text, textX, textY);\n            if (textX + lineCtx.measureText(text).width > canvas.width / scale) {\n              ctx.clearRect(canvas.width / scale - 60, textY - 10, 60, 15);\n              lineCtx.fillText(text, canvas.width / scale - 60, textY);\n            }\n\n            // Переключение направления анимации\n            if (!hasReachedTarget && Math.abs(progress) >= Math.abs(targetY - startY)) {\n              animationDirection *= -1;\n              hasReachedTarget = true;\n            } else if (hasReachedTarget && Math.abs(progress) <= 2) {\n              // Задать предел для почти startY\n              animationDirection *= -1;\n              hasReachedTarget = false;\n            }\n            if (Date.now() - startTime >= 5000) {\n              clearInterval(interval);\n              updatedRectangles.push({\n                x: canvas.width / scale / 2 - 15,\n                y: rectY,\n                width: rectWidth,\n                height: height,\n                color: difference > 0 ? 'green' : 'red'\n              });\n              setRectangles(updatedRectangles);\n              setLastY(difference > 0 ? rectY : rectY + height);\n              setPreviousValue(currentValue);\n              setCurrentValueShow(updatedCurrentValueShow);\n              generateValue();\n            }\n          }, 40);\n          animationTimeoutRef.current = interval;\n          return () => clearInterval(interval);\n        }\n      };\n      drawRectangle();\n    };\n    if (currentValue !== previousValue && previousValue !== null) {\n      startDrawing();\n    }\n  }, [currentValue, previousValue, centerValue, rectangles, lastY]);\n  useEffect(() => {\n    if (showTemporaryLine) {\n      const canvas = tempLineCanvasRef.current;\n      const ctx = canvas.getContext('2d');\n      const scale = window.devicePixelRatio || 1;\n      canvas.width = 500 * scale;\n      canvas.height = 300 * scale;\n      ctx.scale(scale, scale);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Рассчитываем значение independentLineY\n      const independentLineY = lastY || 150 - (previousValue - centerValue) / 1111 * 120;\n\n      // Рисуем временную линию\n      ctx.strokeStyle = 'blue';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(0, independentLineY);\n      ctx.lineTo(canvas.width / scale, independentLineY);\n      ctx.stroke();\n\n      // Запуск таймера\n      if (tempLineTimeoutRef.current) {\n        clearInterval(tempLineTimeoutRef.current);\n      }\n      setTimer(30);\n      tempLineTimeoutRef.current = setInterval(() => {\n        setTimer(prevTimer => {\n          if (prevTimer === 1) {\n            setShowTemporaryLine(false);\n            clearInterval(tempLineTimeoutRef.current);\n            return 0;\n          } else {\n            return prevTimer - 1;\n          }\n        });\n      }, 1000);\n    }\n  }, [showTemporaryLine]);\n  const handleButtonClick = () => {\n    setShowTemporaryLine(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        border: '1px solid black',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: lineCanvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        position: 'absolute',\n        pointerEvents: 'none',\n        zIndex: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: tempLineCanvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        position: 'absolute',\n        pointerEvents: 'none',\n        zIndex: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u043B\\u0438\\u043D\\u0438\\u044E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }, this), showTemporaryLine && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u041B\\u0438\\u043D\\u0438\\u044F \\u0438\\u0441\\u0447\\u0435\\u0437\\u043D\\u0435\\u0442 \\u0447\\u0435\\u0440\\u0435\\u0437 \", timer, \" \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 9\n  }, this);\n};\n_s(Page4, \"5CXOYJX0Wj2mZCRihdW3C3qvRrg=\");\n_c = Page4;\nexport default Page4;\nvar _c;\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Page4","_s","centerValue","setCenterValue","previousValue","setPreviousValue","currentValue","setCurrentValue","currentValueShow","setCurrentValueShow","rectangles","setRectangles","lastY","setLastY","showTemporaryLine","setShowTemporaryLine","timer","setTimer","canvasRef","lineCanvasRef","tempLineCanvasRef","animationTimeoutRef","tempLineTimeoutRef","fetchBitcoinPrice","response","fetch","data","json","price","parseFloat","bpi","USD","rate","replace","error","console","generateValue","randomRangeSelector","Math","random","newValue","min","max","floor","generateRandomMultiplier","rangeSelector","initialize","startDrawing","drawRectangle","canvas","current","lineCanvas","tempLineCanvas","ctx","getContext","lineCtx","tempLineCtx","scale","window","devicePixelRatio","width","height","difference","step","progress","startY","targetY","rectWidth","animationDirection","hasReachedTarget","startTime","Date","now","interval","setInterval","randomMultiplier","clearRect","updatedRectangles","map","rect","x","forEach","fillStyle","color","fillRect","y","abs","rectY","strokeStyle","lineWidth","setLineDash","beginPath","lineEndX","moveTo","lineTo","stroke","updatedCurrentValueShow","text","toFixed","textX","textY","font","fillText","measureText","clearInterval","push","independentLineY","prevTimer","handleButtonClick","style","display","flexDirection","alignItems","position","children","ref","border","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","pointerEvents","zIndex","onClick","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/33/duck/src/Page4.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst Page4 = () => {\n    const [centerValue, setCenterValue] = useState(null);\n    const [previousValue, setPreviousValue] = useState(null);\n    const [currentValue, setCurrentValue] = useState(null);\n    const [currentValueShow, setCurrentValueShow] = useState(1);\n    const [rectangles, setRectangles] = useState([]);\n    const [lastY, setLastY] = useState(null);\n    const [showTemporaryLine, setShowTemporaryLine] = useState(false);\n    const [timer, setTimer] = useState(0);\n\n    const canvasRef = useRef(null);\n    const lineCanvasRef = useRef(null);\n    const tempLineCanvasRef = useRef(null);\n    const animationTimeoutRef = useRef(null);\n    const tempLineTimeoutRef = useRef(null);\n\n    const fetchBitcoinPrice = async () => {\n        try {\n            const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n            const data = await response.json();\n            const price = parseFloat(data.bpi.USD.rate.replace(',', ''));\n            return price;\n        } catch (error) {\n            console.error('Ошибка при получении цены биткоина:', error);\n            return 56000;\n        }\n    };\n\n    const generateValue = () => {\n        if (centerValue !== null) {\n            const randomRangeSelector = Math.random();\n            let newValue;\n\n            if (randomRangeSelector <= 0.6) {\n                const min = centerValue - 222;\n                const max = centerValue + 222;\n                newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n            } else if (randomRangeSelector <= 0.8) {\n                const min = centerValue - 333;\n                const max = centerValue + 333;\n                newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n            } else {\n                const min = centerValue - 1111;\n                const max = centerValue + 1111;\n                newValue = Math.floor(Math.random() * (max - min + 1)) + min;\n            }\n\n            setCurrentValue(newValue);\n        }\n    };\n\n    const generateRandomMultiplier = () => {\n        const rangeSelector = Math.random();\n\n        if (rangeSelector <= 0.4) {\n            return Math.random() * (0.1 - 0.01) + 0.01;\n        } else if (rangeSelector <= 0.7) {\n            return Math.random() * (0.5 - 0.11) + 0.11;\n        } else if (rangeSelector <= 0.8) {\n            return Math.random() * (0.9 - 0.51) + 0.51;\n        } else {\n            return Math.random() * (1 - 0.91) + 0.91;\n        }\n    };\n\n    useEffect(() => {\n        const initialize = async () => {\n            const price = await fetchBitcoinPrice();\n            setCenterValue(price);\n            setPreviousValue(price);\n            setCurrentValue(price);\n            setCurrentValueShow(price);\n        };\n\n        initialize();\n    }, []);\n\n    useEffect(() => {\n        if (centerValue !== null) {\n            generateValue();\n        }\n    }, [centerValue]);\n\n    useEffect(() => {\n        const startDrawing = () => {\n            const drawRectangle = () => {\n                if (currentValue !== previousValue && previousValue !== null) {\n                    const canvas = canvasRef.current;\n                    const lineCanvas = lineCanvasRef.current;\n                    const tempLineCanvas = tempLineCanvasRef.current;\n                    const ctx = canvas.getContext('2d');\n                    const lineCtx = lineCanvas.getContext('2d');\n                    const tempLineCtx = tempLineCanvas.getContext('2d');\n\n                    const scale = window.devicePixelRatio || 1;\n                    canvas.width = 500 * scale;\n                    canvas.height = 300 * scale;\n                    lineCanvas.width = 500 * scale;\n                    lineCanvas.height = 300 * scale;\n                    tempLineCanvas.width = 500 * scale;\n                    tempLineCanvas.height = 300 * scale;\n                    ctx.scale(scale, scale);\n                    lineCtx.scale(scale, scale);\n                    tempLineCtx.scale(scale, scale);\n\n                    const difference = currentValue - previousValue;\n                    let step = difference > 0 ? 1 : -1;\n                    let progress = 0;\n\n                    const startY = lastY !== null ? lastY : 150 - ((previousValue - centerValue) / 1111) * 120;\n                    const targetY = 150 - ((currentValue - centerValue) / 1111) * 120;\n                    const rectWidth = 20;\n\n                    let animationDirection = 1;\n                    let hasReachedTarget = false;\n                    const startTime = Date.now();\n\n                    const interval = setInterval(() => {\n                        const randomMultiplier = generateRandomMultiplier();\n                        progress += step * animationDirection * randomMultiplier;\n\n                        ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n                        lineCtx.clearRect(0, 0, lineCanvas.width / scale, lineCanvas.height / scale);\n                        tempLineCtx.clearRect(0, 0, tempLineCanvas.width / scale, tempLineCanvas.height / scale);\n\n                        const updatedRectangles = rectangles.map((rect) => ({\n                            ...rect,\n                            x: rect.x - rectWidth,\n                        }));\n\n                        updatedRectangles.forEach((rect) => {\n                            ctx.fillStyle = rect.color;\n                            ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n                        });\n\n                        const height = Math.abs(progress);\n                        let rectY;\n\n                        if (difference > 0) {\n                            rectY = startY - height;\n                        } else {\n                            rectY = startY;\n                        }\n\n                        ctx.fillStyle = difference > 0 ? 'green' : 'red';\n                        ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n\n                        // Настройка перфорированной линии\n                        lineCtx.strokeStyle = 'lightblue';\n                        lineCtx.lineWidth = 0.4;\n                        lineCtx.setLineDash([5, 5]);\n                        lineCtx.beginPath();\n\n                        const lineEndX = canvas.width / scale * 0.775;\n                        if (difference > 0) {\n                            lineCtx.moveTo(0, rectY);\n                            lineCtx.lineTo(lineEndX, rectY);\n                        } else {\n                            lineCtx.moveTo(0, rectY + height);\n                            lineCtx.lineTo(lineEndX, rectY + height);\n                        }\n\n                        lineCtx.stroke();\n\n                        const updatedCurrentValueShow = currentValueShow + progress;\n                        const text = updatedCurrentValueShow.toFixed(2);\n                        const textX = lineEndX + 5;\n                        const textY = difference > 0 ? rectY + 3 : rectY + height + 3;\n\n                        lineCtx.font = '10px Arial';\n                        lineCtx.fillStyle = 'white';\n                        lineCtx.fillText(text, textX, textY);\n\n                        if (textX + lineCtx.measureText(text).width > canvas.width / scale) {\n                            ctx.clearRect(canvas.width / scale - 60, textY - 10, 60, 15);\n                            lineCtx.fillText(text, canvas.width / scale - 60, textY);\n                        }\n\n                        // Переключение направления анимации\n                        if (!hasReachedTarget && Math.abs(progress) >= Math.abs(targetY - startY)) {\n                            animationDirection *= -1;\n                            hasReachedTarget = true;\n                        } else if (hasReachedTarget && Math.abs(progress) <= 2) { // Задать предел для почти startY\n                            animationDirection *= -1;\n                            hasReachedTarget = false;\n                        }\n\n                        if (Date.now() - startTime >= 5000) {\n                            clearInterval(interval);\n\n                            updatedRectangles.push({\n                                x: canvas.width / scale / 2 - 15,\n                                y: rectY,\n                                width: rectWidth,\n                                height: height,\n                                color: difference > 0 ? 'green' : 'red',\n                            });\n\n                            setRectangles(updatedRectangles);\n                            setLastY(difference > 0 ? rectY : rectY + height);\n                            setPreviousValue(currentValue);\n                            setCurrentValueShow(updatedCurrentValueShow);\n\n                            generateValue();\n                        }\n                    }, 40);\n\n                    animationTimeoutRef.current = interval;\n\n                    return () => clearInterval(interval);\n                }\n            };\n\n            drawRectangle();\n        };\n\n        if (currentValue !== previousValue && previousValue !== null) {\n            startDrawing();\n        }\n    }, [currentValue, previousValue, centerValue, rectangles, lastY]);\n\n    useEffect(() => {\n        if (showTemporaryLine) {\n            const canvas = tempLineCanvasRef.current;\n            const ctx = canvas.getContext('2d');\n\n            const scale = window.devicePixelRatio || 1;\n            canvas.width = 500 * scale;\n            canvas.height = 300 * scale;\n            ctx.scale(scale, scale);\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            // Рассчитываем значение independentLineY\n            const independentLineY = lastY || 150 - ((previousValue - centerValue) / 1111) * 120;\n\n            // Рисуем временную линию\n            ctx.strokeStyle = 'blue';\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.moveTo(0, independentLineY);\n            ctx.lineTo(canvas.width / scale, independentLineY);\n            ctx.stroke();\n\n            // Запуск таймера\n            if (tempLineTimeoutRef.current) {\n                clearInterval(tempLineTimeoutRef.current);\n            }\n            setTimer(30);\n\n            tempLineTimeoutRef.current = setInterval(() => {\n                setTimer((prevTimer) => {\n                    if (prevTimer === 1) {\n                        setShowTemporaryLine(false);\n                        clearInterval(tempLineTimeoutRef.current);\n                        return 0;\n                    } else {\n                        return prevTimer - 1;\n                    }\n                });\n            }, 1000);\n        }\n    }, [showTemporaryLine]);\n\n    const handleButtonClick = () => {\n        setShowTemporaryLine(true);\n    };\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', position: 'relative' }}>\n            <canvas\n                ref={canvasRef}\n                style={{ width: 500, height: 300, border: '1px solid black', marginBottom: '20px' }}\n            ></canvas>\n            <canvas\n                ref={lineCanvasRef}\n                style={{ width: 500, height: 300, position: 'absolute', pointerEvents: 'none', zIndex: 1 }}\n            ></canvas>\n            <canvas\n                ref={tempLineCanvasRef}\n                style={{ width: 500, height: 300, position: 'absolute', pointerEvents: 'none', zIndex: 2 }}\n            ></canvas>\n            <button onClick={handleButtonClick}>Показать линию</button>\n            {showTemporaryLine && <div>Линия исчезнет через {timer} секунд</div>}\n        </div>\n    );\n};\n\nexport default Page4;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}