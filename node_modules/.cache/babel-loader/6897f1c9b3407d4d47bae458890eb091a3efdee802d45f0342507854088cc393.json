{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/33/duck/src/Page4.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CandleChart = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [centerValue, setCenterValue] = useState(64000); // Центровое значение графика\n  const [candleData, setCandleData] = useState([]); // Данные для свечей\n\n  const randomValue = center => {\n    // Генерация случайного значения с отклонением от центра\n    const delta = Math.floor(Math.random() * 300 - 150);\n    return center + delta;\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const candleWidth = 10; // Ширина каждой свечи\n    const maxCandleHeight = 200; // Максимальная высота свечи\n\n    // Инициализация графика\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const drawCandle = (value, index) => {\n      const color = value >= centerValue ? \"green\" : \"red\";\n      const candleHeight = Math.abs(centerValue - value);\n      ctx.fillStyle = color;\n      ctx.fillRect(canvas.width / 2 + index * candleWidth,\n      // Смещаем свечи влево\n      canvas.height / 2 - candleHeight / 2, candleWidth, candleHeight);\n    };\n    const animateChart = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      candleData.forEach((value, index) => {\n        drawCandle(value, index - candleData.length / 2);\n      });\n\n      // Добавляем новые данные для свечей\n      if (candleData.length < canvas.width / candleWidth) {\n        const newValue = randomValue(centerValue);\n        setCandleData(prev => [...prev, newValue]);\n      } else {\n        setCandleData(prev => [...prev.slice(1), randomValue(centerValue)]);\n      }\n\n      // Обновляем центр, если выходим за границы\n      const lastValue = candleData[candleData.length - 1];\n      if (Math.abs(lastValue - centerValue) > maxCandleHeight) {\n        setCenterValue(lastValue);\n      }\n      requestAnimationFrame(animateChart);\n    };\n    animateChart();\n  }, [candleData, centerValue]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 800,\n    height: 400,\n    style: {\n      border: \"1px solid black\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(CandleChart, \"bI11uVl1OtV+1F7prhKLe9qPBt8=\");\n_c = CandleChart;\nexport default CandleChart;\nvar _c;\n$RefreshReg$(_c, \"CandleChart\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","CandleChart","_s","canvasRef","centerValue","setCenterValue","candleData","setCandleData","randomValue","center","delta","Math","floor","random","canvas","current","ctx","getContext","candleWidth","maxCandleHeight","clearRect","width","height","drawCandle","value","index","color","candleHeight","abs","fillStyle","fillRect","animateChart","forEach","length","newValue","prev","slice","lastValue","requestAnimationFrame","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/33/duck/src/Page4.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\nconst CandleChart = () => {\n  const canvasRef = useRef(null);\n  const [centerValue, setCenterValue] = useState(64000); // Центровое значение графика\n  const [candleData, setCandleData] = useState([]); // Данные для свечей\n\n  const randomValue = (center) => {\n    // Генерация случайного значения с отклонением от центра\n    const delta = Math.floor(Math.random() * 300 - 150);\n    return center + delta;\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const candleWidth = 10; // Ширина каждой свечи\n    const maxCandleHeight = 200; // Максимальная высота свечи\n\n    // Инициализация графика\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    const drawCandle = (value, index) => {\n      const color = value >= centerValue ? \"green\" : \"red\";\n      const candleHeight = Math.abs(centerValue - value);\n      \n      ctx.fillStyle = color;\n      ctx.fillRect(\n        canvas.width / 2 + index * candleWidth, // Смещаем свечи влево\n        canvas.height / 2 - candleHeight / 2,\n        candleWidth,\n        candleHeight\n      );\n    };\n\n    const animateChart = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      candleData.forEach((value, index) => {\n        drawCandle(value, index - candleData.length / 2);\n      });\n\n      // Добавляем новые данные для свечей\n      if (candleData.length < canvas.width / candleWidth) {\n        const newValue = randomValue(centerValue);\n        setCandleData((prev) => [...prev, newValue]);\n      } else {\n        setCandleData((prev) => [...prev.slice(1), randomValue(centerValue)]);\n      }\n\n      // Обновляем центр, если выходим за границы\n      const lastValue = candleData[candleData.length - 1];\n      if (Math.abs(lastValue - centerValue) > maxCandleHeight) {\n        setCenterValue(lastValue);\n      }\n\n      requestAnimationFrame(animateChart);\n    };\n\n    animateChart();\n  }, [candleData, centerValue]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={800}\n      height={400}\n      style={{ border: \"1px solid black\" }}\n    />\n  );\n};\n\nexport default CandleChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}