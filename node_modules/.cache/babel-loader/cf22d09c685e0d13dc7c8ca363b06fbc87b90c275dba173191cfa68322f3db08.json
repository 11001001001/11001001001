{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/33/duck/src/Page4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page4 = () => {\n  _s();\n  const [previousValue, setPreviousValue] = useState(null);\n  const [currentValue, setCurrentValue] = useState(null);\n  const [centerValue, setCenterValue] = useState(60600); // динамический центр\n  const [rectangles, setRectangles] = useState([]); // массив для хранения прямоугольников\n  const canvasRef = useRef(null);\n  const fetchBitcoinPrice = async () => {\n    try {\n      const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n      const data = await response.json();\n      const bitcoinPrice = Math.floor(data.bpi.USD.rate_float);\n      return bitcoinPrice;\n    } catch (error) {\n      console.error('Ошибка при получении цены биткоина:', error);\n      return 60600; // fallback значение на случай ошибки\n    }\n  };\n  const generateNewValue = async centerValue => {\n    const randomDiff = Math.floor(Math.random() * 691) - 345; // случайное число от -345 до 345\n    const newValue = centerValue + randomDiff;\n    setCurrentValue(newValue);\n  };\n  useEffect(() => {\n    const adjustCenterAndRedraw = newCenterValue => {\n      setCenterValue(newCenterValue);\n\n      // Перерисовываем все прямоугольники относительно нового центра\n      const updatedRectangles = rectangles.map(rect => {\n        const newY = 150 - (rect.value - newCenterValue) / 345 * 120;\n        return {\n          ...rect,\n          y: newY\n        };\n      });\n      setRectangles(updatedRectangles);\n      drawRectangles(updatedRectangles);\n    };\n    const drawRectangles = rectanglesToDraw => {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      const scale = window.devicePixelRatio || 1;\n      canvas.width = 500 * scale;\n      canvas.height = 300 * scale;\n      ctx.scale(scale, scale);\n      ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n      // смещение всех прямоугольников влево\n      rectanglesToDraw.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      });\n    };\n    const drawRectangle = () => {\n      if (currentValue !== previousValue) {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        const scale = window.devicePixelRatio || 1;\n        canvas.width = 500 * scale;\n        canvas.height = 300 * scale;\n        ctx.scale(scale, scale);\n        const difference = currentValue - previousValue;\n        const step = difference > 0 ? 1 : -1;\n        let progress = 0;\n        const startY = 150 - (previousValue - centerValue) / 345 * 120;\n        const targetY = 150 - (currentValue - centerValue) / 345 * 120;\n        const rectWidth = 30;\n        const interval = setInterval(() => {\n          progress += step;\n          ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n          // смещение всех прямоугольников влево\n          const updatedRectangles = rectangles.map(rect => ({\n            ...rect,\n            x: rect.x - rectWidth\n          }));\n\n          // рисование всех прямоугольников\n          updatedRectangles.forEach(rect => {\n            ctx.fillStyle = rect.color;\n            ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n          });\n\n          // рисование текущего прямоугольника\n          const height = Math.abs(progress);\n          const rectY = difference > 0 ? startY - height : startY;\n          ctx.fillStyle = difference > 0 ? 'green' : 'red';\n          ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n          if (Math.abs(progress) >= Math.abs(targetY - startY)) {\n            clearInterval(interval);\n\n            // добавляем новый прямоугольник в массив\n            updatedRectangles.push({\n              x: canvas.width / scale / 2 - 15,\n              y: rectY,\n              width: rectWidth,\n              height: height,\n              color: difference > 0 ? 'green' : 'red',\n              value: currentValue\n            });\n            setRectangles(updatedRectangles);\n            setPreviousValue(currentValue);\n\n            // Если текущее значение выходит за пределы видимости, смещаем центр\n            if (currentValue < centerValue - 345 || currentValue > centerValue + 345) {\n              adjustCenterAndRedraw(currentValue);\n            } else {\n              generateNewValue(currentValue); // Запускаем процесс для нового значения\n            }\n          }\n        }, 20);\n        return () => clearInterval(interval);\n      }\n    };\n    if (currentValue !== null && previousValue !== null) {\n      drawRectangle();\n    }\n  }, [currentValue, previousValue, rectangles, centerValue]);\n  useEffect(() => {\n    const initializeGraph = async () => {\n      const bitcoinPrice = await fetchBitcoinPrice();\n      setPreviousValue(bitcoinPrice);\n      setCurrentValue(bitcoinPrice);\n      setCenterValue(bitcoinPrice); // Инициализируем центр с начальным значением\n      generateNewValue(bitcoinPrice); // Запускаем процесс для первого значения\n    };\n    initializeGraph();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        border: '1px solid black',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), currentValue]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(Page4, \"TdJ4TG7f1bqvaYkCB7upQSZM9hQ=\");\n_c = Page4;\nexport default Page4;\nvar _c;\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Page4","_s","previousValue","setPreviousValue","currentValue","setCurrentValue","centerValue","setCenterValue","rectangles","setRectangles","canvasRef","fetchBitcoinPrice","response","fetch","data","json","bitcoinPrice","Math","floor","bpi","USD","rate_float","error","console","generateNewValue","randomDiff","random","newValue","adjustCenterAndRedraw","newCenterValue","updatedRectangles","map","rect","newY","value","y","drawRectangles","rectanglesToDraw","canvas","current","ctx","getContext","scale","window","devicePixelRatio","width","height","clearRect","forEach","fillStyle","color","fillRect","x","drawRectangle","difference","step","progress","startY","targetY","rectWidth","interval","setInterval","abs","rectY","clearInterval","push","initializeGraph","style","display","flexDirection","alignItems","children","ref","border","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/33/duck/src/Page4.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst Page4 = () => {\n  const [previousValue, setPreviousValue] = useState(null);\n  const [currentValue, setCurrentValue] = useState(null);\n  const [centerValue, setCenterValue] = useState(60600); // динамический центр\n  const [rectangles, setRectangles] = useState([]); // массив для хранения прямоугольников\n  const canvasRef = useRef(null);\n\n  const fetchBitcoinPrice = async () => {\n    try {\n      const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n      const data = await response.json();\n      const bitcoinPrice = Math.floor(data.bpi.USD.rate_float);\n      return bitcoinPrice;\n    } catch (error) {\n      console.error('Ошибка при получении цены биткоина:', error);\n      return 60600; // fallback значение на случай ошибки\n    }\n  };\n\n  const generateNewValue = async (centerValue) => {\n    const randomDiff = Math.floor(Math.random() * 691) - 345; // случайное число от -345 до 345\n    const newValue = centerValue + randomDiff;\n    setCurrentValue(newValue);\n  };\n\n  useEffect(() => {\n    const adjustCenterAndRedraw = (newCenterValue) => {\n      setCenterValue(newCenterValue);\n\n      // Перерисовываем все прямоугольники относительно нового центра\n      const updatedRectangles = rectangles.map((rect) => {\n        const newY = 150 - ((rect.value - newCenterValue) / 345) * 120;\n        return { ...rect, y: newY };\n      });\n\n      setRectangles(updatedRectangles);\n      drawRectangles(updatedRectangles);\n    };\n\n    const drawRectangles = (rectanglesToDraw) => {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      const scale = window.devicePixelRatio || 1;\n      canvas.width = 500 * scale;\n      canvas.height = 300 * scale;\n      ctx.scale(scale, scale);\n\n      ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n      // смещение всех прямоугольников влево\n      rectanglesToDraw.forEach((rect) => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      });\n    };\n\n    const drawRectangle = () => {\n      if (currentValue !== previousValue) {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        const scale = window.devicePixelRatio || 1;\n        canvas.width = 500 * scale;\n        canvas.height = 300 * scale;\n        ctx.scale(scale, scale);\n\n        const difference = currentValue - previousValue;\n        const step = difference > 0 ? 1 : -1;\n        let progress = 0;\n\n        const startY = 150 - ((previousValue - centerValue) / 345) * 120;\n        const targetY = 150 - ((currentValue - centerValue) / 345) * 120;\n        const rectWidth = 30;\n        const interval = setInterval(() => {\n          progress += step;\n\n          ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n          // смещение всех прямоугольников влево\n          const updatedRectangles = rectangles.map((rect) => ({\n            ...rect,\n            x: rect.x - rectWidth,\n          }));\n\n          // рисование всех прямоугольников\n          updatedRectangles.forEach((rect) => {\n            ctx.fillStyle = rect.color;\n            ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n          });\n\n          // рисование текущего прямоугольника\n          const height = Math.abs(progress);\n          const rectY = difference > 0 ? startY - height : startY;\n          ctx.fillStyle = difference > 0 ? 'green' : 'red';\n          ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n\n          if (Math.abs(progress) >= Math.abs(targetY - startY)) {\n            clearInterval(interval);\n\n            // добавляем новый прямоугольник в массив\n            updatedRectangles.push({\n              x: canvas.width / scale / 2 - 15,\n              y: rectY,\n              width: rectWidth,\n              height: height,\n              color: difference > 0 ? 'green' : 'red',\n              value: currentValue,\n            });\n\n            setRectangles(updatedRectangles);\n            setPreviousValue(currentValue);\n\n            // Если текущее значение выходит за пределы видимости, смещаем центр\n            if (currentValue < centerValue - 345 || currentValue > centerValue + 345) {\n              adjustCenterAndRedraw(currentValue);\n            } else {\n              generateNewValue(currentValue); // Запускаем процесс для нового значения\n            }\n          }\n        }, 20);\n\n        return () => clearInterval(interval);\n      }\n    };\n\n    if (currentValue !== null && previousValue !== null) {\n      drawRectangle();\n    }\n  }, [currentValue, previousValue, rectangles, centerValue]);\n\n  useEffect(() => {\n    const initializeGraph = async () => {\n      const bitcoinPrice = await fetchBitcoinPrice();\n      setPreviousValue(bitcoinPrice);\n      setCurrentValue(bitcoinPrice);\n      setCenterValue(bitcoinPrice); // Инициализируем центр с начальным значением\n      generateNewValue(bitcoinPrice); // Запускаем процесс для первого значения\n    };\n\n    initializeGraph();\n  }, []);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <canvas\n        ref={canvasRef}\n        style={{ width: 500, height: 300, border: '1px solid black', marginBottom: '20px' }}\n      ></canvas>\n      {currentValue}\n    </div>\n    \n  );\n};\n\nexport default Page4;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACvD,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAMe,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;EAE9B,MAAMc,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uDAAuD,CAAC;MACrF,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACK,GAAG,CAACC,GAAG,CAACC,UAAU,CAAC;MACxD,OAAOL,YAAY;IACrB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,OAAO,KAAK,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAME,gBAAgB,GAAG,MAAOlB,WAAW,IAAK;IAC9C,MAAMmB,UAAU,GAAGR,IAAI,CAACC,KAAK,CAACD,IAAI,CAACS,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;IAC1D,MAAMC,QAAQ,GAAGrB,WAAW,GAAGmB,UAAU;IACzCpB,eAAe,CAACsB,QAAQ,CAAC;EAC3B,CAAC;EAED/B,SAAS,CAAC,MAAM;IACd,MAAMgC,qBAAqB,GAAIC,cAAc,IAAK;MAChDtB,cAAc,CAACsB,cAAc,CAAC;;MAE9B;MACA,MAAMC,iBAAiB,GAAGtB,UAAU,CAACuB,GAAG,CAAEC,IAAI,IAAK;QACjD,MAAMC,IAAI,GAAG,GAAG,GAAI,CAACD,IAAI,CAACE,KAAK,GAAGL,cAAc,IAAI,GAAG,GAAI,GAAG;QAC9D,OAAO;UAAE,GAAGG,IAAI;UAAEG,CAAC,EAAEF;QAAK,CAAC;MAC7B,CAAC,CAAC;MAEFxB,aAAa,CAACqB,iBAAiB,CAAC;MAChCM,cAAc,CAACN,iBAAiB,CAAC;IACnC,CAAC;IAED,MAAMM,cAAc,GAAIC,gBAAgB,IAAK;MAC3C,MAAMC,MAAM,GAAG5B,SAAS,CAAC6B,OAAO;MAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;MAEnC,MAAMC,KAAK,GAAGC,MAAM,CAACC,gBAAgB,IAAI,CAAC;MAC1CN,MAAM,CAACO,KAAK,GAAG,GAAG,GAAGH,KAAK;MAC1BJ,MAAM,CAACQ,MAAM,GAAG,GAAG,GAAGJ,KAAK;MAC3BF,GAAG,CAACE,KAAK,CAACA,KAAK,EAAEA,KAAK,CAAC;MAEvBF,GAAG,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,EAAET,MAAM,CAACO,KAAK,GAAGH,KAAK,EAAEJ,MAAM,CAACQ,MAAM,GAAGJ,KAAK,CAAC;;MAEhE;MACAL,gBAAgB,CAACW,OAAO,CAAEhB,IAAI,IAAK;QACjCQ,GAAG,CAACS,SAAS,GAAGjB,IAAI,CAACkB,KAAK;QAC1BV,GAAG,CAACW,QAAQ,CAACnB,IAAI,CAACoB,CAAC,EAAEpB,IAAI,CAACG,CAAC,EAAEH,IAAI,CAACa,KAAK,EAAEb,IAAI,CAACc,MAAM,CAAC;MACvD,CAAC,CAAC;IACJ,CAAC;IAED,MAAMO,aAAa,GAAGA,CAAA,KAAM;MAC1B,IAAIjD,YAAY,KAAKF,aAAa,EAAE;QAClC,MAAMoC,MAAM,GAAG5B,SAAS,CAAC6B,OAAO;QAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;QAEnC,MAAMC,KAAK,GAAGC,MAAM,CAACC,gBAAgB,IAAI,CAAC;QAC1CN,MAAM,CAACO,KAAK,GAAG,GAAG,GAAGH,KAAK;QAC1BJ,MAAM,CAACQ,MAAM,GAAG,GAAG,GAAGJ,KAAK;QAC3BF,GAAG,CAACE,KAAK,CAACA,KAAK,EAAEA,KAAK,CAAC;QAEvB,MAAMY,UAAU,GAAGlD,YAAY,GAAGF,aAAa;QAC/C,MAAMqD,IAAI,GAAGD,UAAU,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,IAAIE,QAAQ,GAAG,CAAC;QAEhB,MAAMC,MAAM,GAAG,GAAG,GAAI,CAACvD,aAAa,GAAGI,WAAW,IAAI,GAAG,GAAI,GAAG;QAChE,MAAMoD,OAAO,GAAG,GAAG,GAAI,CAACtD,YAAY,GAAGE,WAAW,IAAI,GAAG,GAAI,GAAG;QAChE,MAAMqD,SAAS,GAAG,EAAE;QACpB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;UACjCL,QAAQ,IAAID,IAAI;UAEhBf,GAAG,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,EAAET,MAAM,CAACO,KAAK,GAAGH,KAAK,EAAEJ,MAAM,CAACQ,MAAM,GAAGJ,KAAK,CAAC;;UAEhE;UACA,MAAMZ,iBAAiB,GAAGtB,UAAU,CAACuB,GAAG,CAAEC,IAAI,KAAM;YAClD,GAAGA,IAAI;YACPoB,CAAC,EAAEpB,IAAI,CAACoB,CAAC,GAAGO;UACd,CAAC,CAAC,CAAC;;UAEH;UACA7B,iBAAiB,CAACkB,OAAO,CAAEhB,IAAI,IAAK;YAClCQ,GAAG,CAACS,SAAS,GAAGjB,IAAI,CAACkB,KAAK;YAC1BV,GAAG,CAACW,QAAQ,CAACnB,IAAI,CAACoB,CAAC,EAAEpB,IAAI,CAACG,CAAC,EAAEH,IAAI,CAACa,KAAK,EAAEb,IAAI,CAACc,MAAM,CAAC;UACvD,CAAC,CAAC;;UAEF;UACA,MAAMA,MAAM,GAAG7B,IAAI,CAAC6C,GAAG,CAACN,QAAQ,CAAC;UACjC,MAAMO,KAAK,GAAGT,UAAU,GAAG,CAAC,GAAGG,MAAM,GAAGX,MAAM,GAAGW,MAAM;UACvDjB,GAAG,CAACS,SAAS,GAAGK,UAAU,GAAG,CAAC,GAAG,OAAO,GAAG,KAAK;UAChDd,GAAG,CAACW,QAAQ,CAACb,MAAM,CAACO,KAAK,GAAGH,KAAK,GAAG,CAAC,GAAG,EAAE,EAAEqB,KAAK,EAAEJ,SAAS,EAAEb,MAAM,CAAC;UAErE,IAAI7B,IAAI,CAAC6C,GAAG,CAACN,QAAQ,CAAC,IAAIvC,IAAI,CAAC6C,GAAG,CAACJ,OAAO,GAAGD,MAAM,CAAC,EAAE;YACpDO,aAAa,CAACJ,QAAQ,CAAC;;YAEvB;YACA9B,iBAAiB,CAACmC,IAAI,CAAC;cACrBb,CAAC,EAAEd,MAAM,CAACO,KAAK,GAAGH,KAAK,GAAG,CAAC,GAAG,EAAE;cAChCP,CAAC,EAAE4B,KAAK;cACRlB,KAAK,EAAEc,SAAS;cAChBb,MAAM,EAAEA,MAAM;cACdI,KAAK,EAAEI,UAAU,GAAG,CAAC,GAAG,OAAO,GAAG,KAAK;cACvCpB,KAAK,EAAE9B;YACT,CAAC,CAAC;YAEFK,aAAa,CAACqB,iBAAiB,CAAC;YAChC3B,gBAAgB,CAACC,YAAY,CAAC;;YAE9B;YACA,IAAIA,YAAY,GAAGE,WAAW,GAAG,GAAG,IAAIF,YAAY,GAAGE,WAAW,GAAG,GAAG,EAAE;cACxEsB,qBAAqB,CAACxB,YAAY,CAAC;YACrC,CAAC,MAAM;cACLoB,gBAAgB,CAACpB,YAAY,CAAC,CAAC,CAAC;YAClC;UACF;QACF,CAAC,EAAE,EAAE,CAAC;QAEN,OAAO,MAAM4D,aAAa,CAACJ,QAAQ,CAAC;MACtC;IACF,CAAC;IAED,IAAIxD,YAAY,KAAK,IAAI,IAAIF,aAAa,KAAK,IAAI,EAAE;MACnDmD,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACjD,YAAY,EAAEF,aAAa,EAAEM,UAAU,EAAEF,WAAW,CAAC,CAAC;EAE1DV,SAAS,CAAC,MAAM;IACd,MAAMsE,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,MAAMlD,YAAY,GAAG,MAAML,iBAAiB,CAAC,CAAC;MAC9CR,gBAAgB,CAACa,YAAY,CAAC;MAC9BX,eAAe,CAACW,YAAY,CAAC;MAC7BT,cAAc,CAACS,YAAY,CAAC,CAAC,CAAC;MAC9BQ,gBAAgB,CAACR,YAAY,CAAC,CAAC,CAAC;IAClC,CAAC;IAEDkD,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEnE,OAAA;IAAKoE,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,aAAa,EAAE,QAAQ;MAAEC,UAAU,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAC7ExE,OAAA;MACEyE,GAAG,EAAE9D,SAAU;MACfyD,KAAK,EAAE;QAAEtB,KAAK,EAAE,GAAG;QAAEC,MAAM,EAAE,GAAG;QAAE2B,MAAM,EAAE,iBAAiB;QAAEC,YAAY,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7E,CAAC,EACT1E,YAAY;EAAA;IAAAuE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAGV,CAAC;AAAC7E,EAAA,CAzJID,KAAK;AAAA+E,EAAA,GAAL/E,KAAK;AA2JX,eAAeA,KAAK;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}