{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/33/duck/src/Page4.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page4 = () => {\n  _s();\n  const chartContainerRef = useRef(null);\n  const chartRef = useRef(null);\n  const candleSeriesRef = useRef(null);\n  useEffect(() => {\n    // Создание графика\n    chartRef.current = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 300,\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: true\n      }\n    });\n    candleSeriesRef.current = chartRef.current.addCandlestickSeries();\n\n    // Функция для получения и обновления данных о свече\n    const fetchCandleData = () => {\n      fetch('https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1m&limit=100').then(response => response.json()).then(data => {\n        const candleData = data.map(candle => ({\n          time: candle[0] / 1000,\n          // Перевод времени в секунды\n          open: parseFloat(candle[1]),\n          high: parseFloat(candle[2]),\n          low: parseFloat(candle[3]),\n          close: parseFloat(candle[4])\n        }));\n        candleSeriesRef.current.setData(candleData); // Установка данных на график\n      }).catch(error => {\n        console.error('Failed to fetch candle data:', error);\n      });\n    };\n    fetchCandleData();\n    const interval = setInterval(fetchCandleData, 5000); // Обновление данных каждые 5 секунд\n\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    const handleResize = () => {\n      if (chartRef.current) {\n        chartRef.current.applyOptions({\n          width: chartContainerRef.current.clientWidth\n        });\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      padding: '20px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartContainerRef,\n      style: {\n        width: '100%',\n        height: '300px',\n        marginTop: '50px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Page4, \"yTKAyEs1kyK0son8topX0nDC0Ok=\");\n_c = Page4;\nexport default Page4;\nvar _c;\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"names":["React","useEffect","useRef","createChart","jsxDEV","_jsxDEV","Page4","_s","chartContainerRef","chartRef","candleSeriesRef","current","width","clientWidth","height","timeScale","timeVisible","secondsVisible","addCandlestickSeries","fetchCandleData","fetch","then","response","json","data","candleData","map","candle","time","open","parseFloat","high","low","close","setData","catch","error","console","interval","setInterval","clearInterval","handleResize","applyOptions","window","addEventListener","removeEventListener","style","position","padding","children","ref","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/33/duck/src/Page4.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\n\nconst Page4 = () => {\n  const chartContainerRef = useRef(null);\n  const chartRef = useRef(null);\n  const candleSeriesRef = useRef(null);\n\n  useEffect(() => {\n    // Создание графика\n    chartRef.current = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 300,\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: true,\n      },\n    });\n\n    candleSeriesRef.current = chartRef.current.addCandlestickSeries();\n\n    // Функция для получения и обновления данных о свече\n    const fetchCandleData = () => {\n      fetch('https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1m&limit=100')\n        .then(response => response.json())\n        .then(data => {\n          const candleData = data.map(candle => ({\n            time: candle[0] / 1000, // Перевод времени в секунды\n            open: parseFloat(candle[1]),\n            high: parseFloat(candle[2]),\n            low: parseFloat(candle[3]),\n            close: parseFloat(candle[4]),\n          }));\n\n          candleSeriesRef.current.setData(candleData); // Установка данных на график\n        })\n        .catch(error => {\n          console.error('Failed to fetch candle data:', error);\n        });\n    };\n\n    fetchCandleData();\n    const interval = setInterval(fetchCandleData, 5000); // Обновление данных каждые 5 секунд\n\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (chartRef.current) {\n        chartRef.current.applyOptions({ width: chartContainerRef.current.clientWidth });\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <div style={{ position: 'relative', padding: '20px' }}>\n      {/* График свечей */}\n      <div ref={chartContainerRef} style={{ width: '100%', height: '300px', marginTop: '50px' }}></div>\n    </div>\n  );\n};\n\nexport default Page4;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}