{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/33/duck/src/Page4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page4 = () => {\n  _s();\n  const [previousValue, setPreviousValue] = useState(null);\n  const [currentValue, setCurrentValue] = useState(null);\n  const [rectangles, setRectangles] = useState([]);\n  const [currentRange, setCurrentRange] = useState([60100, 61100]); // начальная область видимости Y1\n  const canvasRef = useRef(null);\n  const ranges = [[60100, 61100],\n  // Y1\n  [61100, 62100],\n  // Y2\n  [62100, 63100] // Y3\n  // добавляйте новые области по мере необходимости\n  ];\n  const fetchBitcoinPrice = async () => {\n    try {\n      const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n      const data = await response.json();\n      const bitcoinPrice = Math.floor(data.bpi.USD.rate_float);\n      return bitcoinPrice;\n    } catch (error) {\n      console.error('Ошибка при получении цены биткоина:', error);\n      return 60600; // fallback значение на случай ошибки\n    }\n  };\n  const generateNewValue = async centerValue => {\n    const randomDiff = Math.floor(Math.random() * 691) - 345;\n    const newValue = centerValue + randomDiff;\n\n    // Проверка выхода за границы текущей области и переключение на другую\n    const currentRangeIndex = ranges.findIndex(range => newValue >= range[0] && newValue <= range[1]);\n    if (currentRangeIndex !== -1) {\n      setCurrentRange(ranges[currentRangeIndex]);\n    }\n    setCurrentValue(newValue);\n  };\n  useEffect(() => {\n    const drawRectangle = () => {\n      if (currentValue !== previousValue) {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        const scale = window.devicePixelRatio || 1;\n        canvas.width = 500 * scale;\n        canvas.height = 300 * scale;\n        ctx.scale(scale, scale);\n        const difference = currentValue - previousValue;\n        const step = difference > 0 ? 1 : -1;\n        let progress = 0;\n        const rangeMin = currentRange[0];\n        const rangeMax = currentRange[1];\n        const rangeSize = rangeMax - rangeMin;\n        const startY = 150 - (previousValue - rangeMin) / rangeSize * 300;\n        const targetY = 150 - (currentValue - rangeMin) / rangeSize * 300;\n        const rectWidth = 30;\n        const interval = setInterval(() => {\n          progress += step;\n          ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n          // смещение всех прямоугольников влево\n          const updatedRectangles = rectangles.map(rect => ({\n            ...rect,\n            x: rect.x - rectWidth\n          }));\n\n          // рисование всех прямоугольников\n          updatedRectangles.forEach(rect => {\n            ctx.fillStyle = rect.color;\n            ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n          });\n\n          // рисование текущего прямоугольника\n          const height = Math.abs(progress);\n          const rectY = difference > 0 ? startY - height : startY;\n          ctx.fillStyle = difference > 0 ? 'green' : 'red';\n          ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n          if (Math.abs(progress) >= Math.abs(targetY - startY)) {\n            clearInterval(interval);\n            updatedRectangles.push({\n              x: canvas.width / scale / 2 - 15,\n              y: rectY,\n              width: rectWidth,\n              height: height,\n              color: difference > 0 ? 'green' : 'red'\n            });\n            setRectangles(updatedRectangles);\n            setPreviousValue(currentValue);\n            generateNewValue(currentValue); // Запускаем процесс для нового значения\n          }\n        }, 20);\n        return () => clearInterval(interval);\n      }\n    };\n    if (currentValue !== null && previousValue !== null) {\n      drawRectangle();\n    }\n  }, [currentValue, previousValue, rectangles, currentRange]);\n  useEffect(() => {\n    const initializeGraph = async () => {\n      const bitcoinPrice = await fetchBitcoinPrice();\n      setPreviousValue(bitcoinPrice);\n      setCurrentValue(bitcoinPrice);\n      generateNewValue(bitcoinPrice); // Запускаем процесс для первого значения\n    };\n    initializeGraph();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: 500,\n        height: 300,\n        border: '1px solid black',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), currentValue]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(Page4, \"i5DTtXTv7C9FyCCW+RkuIKSeRIo=\");\n_c = Page4;\nexport default Page4;\nvar _c;\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Page4","_s","previousValue","setPreviousValue","currentValue","setCurrentValue","rectangles","setRectangles","currentRange","setCurrentRange","canvasRef","ranges","fetchBitcoinPrice","response","fetch","data","json","bitcoinPrice","Math","floor","bpi","USD","rate_float","error","console","generateNewValue","centerValue","randomDiff","random","newValue","currentRangeIndex","findIndex","range","drawRectangle","canvas","current","ctx","getContext","scale","window","devicePixelRatio","width","height","difference","step","progress","rangeMin","rangeMax","rangeSize","startY","targetY","rectWidth","interval","setInterval","clearRect","updatedRectangles","map","rect","x","forEach","fillStyle","color","fillRect","y","abs","rectY","clearInterval","push","initializeGraph","style","display","flexDirection","alignItems","children","ref","border","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/33/duck/src/Page4.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst Page4 = () => {\n  const [previousValue, setPreviousValue] = useState(null);\n  const [currentValue, setCurrentValue] = useState(null);\n  const [rectangles, setRectangles] = useState([]);\n  const [currentRange, setCurrentRange] = useState([60100, 61100]); // начальная область видимости Y1\n  const canvasRef = useRef(null);\n\n  const ranges = [\n    [60100, 61100], // Y1\n    [61100, 62100], // Y2\n    [62100, 63100], // Y3\n    // добавляйте новые области по мере необходимости\n  ];\n\n  const fetchBitcoinPrice = async () => {\n    try {\n      const response = await fetch('https://api.coindesk.com/v1/bpi/currentprice/BTC.json');\n      const data = await response.json();\n      const bitcoinPrice = Math.floor(data.bpi.USD.rate_float);\n      return bitcoinPrice;\n    } catch (error) {\n      console.error('Ошибка при получении цены биткоина:', error);\n      return 60600; // fallback значение на случай ошибки\n    }\n  };\n\n  const generateNewValue = async (centerValue) => {\n    const randomDiff = Math.floor(Math.random() * 691) - 345;\n    const newValue = centerValue + randomDiff;\n\n    // Проверка выхода за границы текущей области и переключение на другую\n    const currentRangeIndex = ranges.findIndex(\n      (range) => newValue >= range[0] && newValue <= range[1]\n    );\n\n    if (currentRangeIndex !== -1) {\n      setCurrentRange(ranges[currentRangeIndex]);\n    }\n\n    setCurrentValue(newValue);\n  };\n\n  useEffect(() => {\n    const drawRectangle = () => {\n      if (currentValue !== previousValue) {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        const scale = window.devicePixelRatio || 1;\n        canvas.width = 500 * scale;\n        canvas.height = 300 * scale;\n        ctx.scale(scale, scale);\n\n        const difference = currentValue - previousValue;\n        const step = difference > 0 ? 1 : -1;\n        let progress = 0;\n\n        const rangeMin = currentRange[0];\n        const rangeMax = currentRange[1];\n        const rangeSize = rangeMax - rangeMin;\n\n        const startY = 150 - ((previousValue - rangeMin) / rangeSize) * 300;\n        const targetY = 150 - ((currentValue - rangeMin) / rangeSize) * 300;\n        const rectWidth = 30;\n\n        const interval = setInterval(() => {\n          progress += step;\n\n          ctx.clearRect(0, 0, canvas.width / scale, canvas.height / scale);\n\n          // смещение всех прямоугольников влево\n          const updatedRectangles = rectangles.map((rect) => ({\n            ...rect,\n            x: rect.x - rectWidth,\n          }));\n\n          // рисование всех прямоугольников\n          updatedRectangles.forEach((rect) => {\n            ctx.fillStyle = rect.color;\n            ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n          });\n\n          // рисование текущего прямоугольника\n          const height = Math.abs(progress);\n          const rectY = difference > 0 ? startY - height : startY;\n          ctx.fillStyle = difference > 0 ? 'green' : 'red';\n          ctx.fillRect(canvas.width / scale / 2 - 15, rectY, rectWidth, height);\n\n          if (Math.abs(progress) >= Math.abs(targetY - startY)) {\n            clearInterval(interval);\n\n            updatedRectangles.push({\n              x: canvas.width / scale / 2 - 15,\n              y: rectY,\n              width: rectWidth,\n              height: height,\n              color: difference > 0 ? 'green' : 'red',\n            });\n\n            setRectangles(updatedRectangles);\n            setPreviousValue(currentValue);\n            generateNewValue(currentValue); // Запускаем процесс для нового значения\n          }\n        }, 20);\n\n        return () => clearInterval(interval);\n      }\n    };\n\n    if (currentValue !== null && previousValue !== null) {\n      drawRectangle();\n    }\n  }, [currentValue, previousValue, rectangles, currentRange]);\n\n  useEffect(() => {\n    const initializeGraph = async () => {\n      const bitcoinPrice = await fetchBitcoinPrice();\n      setPreviousValue(bitcoinPrice);\n      setCurrentValue(bitcoinPrice);\n      generateNewValue(bitcoinPrice); // Запускаем процесс для первого значения\n    };\n\n    initializeGraph();\n  }, []);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <canvas\n        ref={canvasRef}\n        style={{ width: 500, height: 300, border: '1px solid black', marginBottom: '20px' }}\n      ></canvas>\n      {currentValue}\n    </div>\n  );\n};\n\nexport default Page4;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}