import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["className", "onLoad", "alt"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { useCallback, useState } from "react";
import styles from "./Image.styles";
import classNames from "classnames";
import { jsx as _jsx } from "react/jsx-runtime";

function isAlreadyLoaded(src) {
  var image = new window.Image();
  image.src = src;
  return image.complete;
}

export var Image = function Image(_ref) {
  var className = _ref.className,
      onLoad = _ref.onLoad,
      alt = _ref.alt,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(isAlreadyLoaded(restProps.src || "")),
      _useState2 = _slicedToArray(_useState, 2),
      isLoaded = _useState2[0],
      setIsLoaded = _useState2[1];

  var onLoadHandler = useCallback(function (e) {
    setIsLoaded(true);
    onLoad && onLoad(e);
  }, [onLoad]);
  return /*#__PURE__*/_jsx("img", _objectSpread(_objectSpread({}, restProps), {}, {
    className: classNames(styles.root, isLoaded && styles.loaded, className),
    onLoad: onLoadHandler,
    alt: alt
  }));
};